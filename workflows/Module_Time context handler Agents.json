{
  "nodes": [
    {
      "id": "startAgentflow_0",
      "type": "agentFlow",
      "position": {
        "x": -1434.4915346533573,
        "y": 72.2667772281767
      },
      "data": {
        "id": "startAgentflow_0",
        "label": "Start",
        "version": 1.1,
        "name": "startAgentflow",
        "type": "Start",
        "color": "#7EE787",
        "hideInput": true,
        "baseClasses": [
          "Start"
        ],
        "category": "Agent Flows",
        "description": "Starting point of the agentflow",
        "inputParams": [
          {
            "label": "Input Type",
            "name": "startInputType",
            "type": "options",
            "options": [
              {
                "label": "Chat Input",
                "name": "chatInput",
                "description": "Start the conversation with chat input"
              },
              {
                "label": "Form Input",
                "name": "formInput",
                "description": "Start the workflow with form inputs"
              }
            ],
            "default": "chatInput",
            "id": "startAgentflow_0-input-startInputType-options",
            "display": true
          },
          {
            "label": "Form Title",
            "name": "formTitle",
            "type": "string",
            "placeholder": "Please Fill Out The Form",
            "show": {
              "startInputType": "formInput"
            },
            "id": "startAgentflow_0-input-formTitle-string",
            "display": false
          },
          {
            "label": "Form Description",
            "name": "formDescription",
            "type": "string",
            "placeholder": "Complete all fields below to continue",
            "show": {
              "startInputType": "formInput"
            },
            "id": "startAgentflow_0-input-formDescription-string",
            "display": false
          },
          {
            "label": "Form Input Types",
            "name": "formInputTypes",
            "description": "Specify the type of form input",
            "type": "array",
            "show": {
              "startInputType": "formInput"
            },
            "array": [
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  },
                  {
                    "label": "Options",
                    "name": "options"
                  }
                ],
                "default": "string"
              },
              {
                "label": "Label",
                "name": "label",
                "type": "string",
                "placeholder": "Label for the input"
              },
              {
                "label": "Variable Name",
                "name": "name",
                "type": "string",
                "placeholder": "Variable name for the input (must be camel case)",
                "description": "Variable name must be camel case. For example: firstName, lastName, etc."
              },
              {
                "label": "Add Options",
                "name": "addOptions",
                "type": "array",
                "show": {
                  "formInputTypes[$index].type": "options"
                },
                "array": [
                  {
                    "label": "Option",
                    "name": "option",
                    "type": "string"
                  }
                ]
              }
            ],
            "id": "startAgentflow_0-input-formInputTypes-array",
            "display": false
          },
          {
            "label": "Ephemeral Memory",
            "name": "startEphemeralMemory",
            "type": "boolean",
            "description": "Start fresh for every execution without past chat history",
            "optional": true,
            "id": "startAgentflow_0-input-startEphemeralMemory-boolean",
            "display": true
          },
          {
            "label": "Flow State",
            "name": "startState",
            "description": "Runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string",
                "placeholder": "Foo"
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "placeholder": "Bar",
                "optional": true
              }
            ],
            "id": "startAgentflow_0-input-startState-array",
            "display": true
          },
          {
            "label": "Persist State",
            "name": "startPersistState",
            "type": "boolean",
            "description": "Persist the state in the same session",
            "optional": true,
            "id": "startAgentflow_0-input-startPersistState-boolean",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "startInputType": "chatInput",
          "startEphemeralMemory": true,
          "startState": [
            {
              "key": "input",
              "value": ""
            },
            {
              "key": "start_date",
              "value": ""
            },
            {
              "key": "end_date",
              "value": ""
            },
            {
              "key": "apiUrl",
              "value": "http://localhost:8000"
            },
            {
              "key": "userId",
              "value": ""
            }
          ],
          "startPersistState": ""
        },
        "outputAnchors": [
          {
            "id": "startAgentflow_0-output-startAgentflow",
            "label": "Start",
            "name": "startAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 103,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": -1434.4915346533573,
        "y": 72.2667772281767
      },
      "dragging": false
    },
    {
      "id": "conditionAgentAgentflow_0",
      "position": {
        "x": 208.4539627284688,
        "y": 55.36077900277823
      },
      "data": {
        "id": "conditionAgentAgentflow_0",
        "label": "Is it a date or a duration?",
        "version": 1.1,
        "name": "conditionAgentAgentflow",
        "type": "ConditionAgent",
        "color": "#ff8fab",
        "baseClasses": [
          "ConditionAgent"
        ],
        "category": "Agent Flows",
        "description": "Utilize an agent to split flows based on dynamic conditions",
        "inputParams": [
          {
            "label": "Model",
            "name": "conditionAgentModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "conditionAgentAgentflow_0-input-conditionAgentModel-asyncOptions",
            "display": true
          },
          {
            "label": "Instructions",
            "name": "conditionAgentInstructions",
            "type": "string",
            "description": "A general instructions of what the condition agent should do",
            "rows": 4,
            "acceptVariable": true,
            "placeholder": "Determine if the user is interested in learning about AI",
            "id": "conditionAgentAgentflow_0-input-conditionAgentInstructions-string",
            "display": true
          },
          {
            "label": "Input",
            "name": "conditionAgentInput",
            "type": "string",
            "description": "Input to be used for the condition agent",
            "rows": 4,
            "acceptVariable": true,
            "default": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span> </p>",
            "id": "conditionAgentAgentflow_0-input-conditionAgentInput-string",
            "display": true
          },
          {
            "label": "Scenarios",
            "name": "conditionAgentScenarios",
            "description": "Define the scenarios that will be used as the conditions to split the flow",
            "type": "array",
            "array": [
              {
                "label": "Scenario",
                "name": "scenario",
                "type": "string",
                "placeholder": "User is asking for a pizza"
              }
            ],
            "default": [
              {
                "scenario": ""
              },
              {
                "scenario": ""
              }
            ],
            "id": "conditionAgentAgentflow_0-input-conditionAgentScenarios-array",
            "display": true
          },
          {
            "label": "Override System Prompt",
            "name": "conditionAgentOverrideSystemPrompt",
            "type": "boolean",
            "description": "Override initial system prompt for Condition Agent",
            "optional": true,
            "id": "conditionAgentAgentflow_0-input-conditionAgentOverrideSystemPrompt-boolean",
            "display": true
          },
          {
            "label": "Node System Prompt",
            "name": "conditionAgentSystemPrompt",
            "type": "string",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "default": "<p>You are part of a multi-agent system designed to make agent coordination and execution easy. Your task is to analyze the given input and select one matching scenario from a provided set of scenarios.</p>\n    <ul>\n        <li><strong>Input</strong>: A string representing the user's query, message or data.</li>\n        <li><strong>Scenarios</strong>: A list of predefined scenarios that relate to the input.</li>\n        <li><strong>Instruction</strong>: Determine which of the provided scenarios is the best fit for the input.</li>\n    </ul>\n    <h2>Steps</h2>\n    <ol>\n        <li><strong>Read the input string</strong> and the list of scenarios.</li>\n        <li><strong>Analyze the content of the input</strong> to identify its main topic or intention.</li>\n        <li><strong>Compare the input with each scenario</strong>: Evaluate how well the input's topic or intention aligns with each of the provided scenarios and select the one that is the best fit.</li>\n        <li><strong>Output the result</strong>: Return the selected scenario in the specified JSON format.</li>\n    </ol>\n    <h2>Output Format</h2>\n    <p>Output should be a JSON object that names the selected scenario, like this: <code>{\"output\": \"<selected_scenario_name>\"}</code>. No explanation is needed.</p>\n    <h2>Examples</h2>\n    <ol>\n       <li>\n            <p><strong>Input</strong>: <code>{\"input\": \"Hello\", \"scenarios\": [\"user is asking about AI\", \"user is not asking about AI\"], \"instruction\": \"Your task is to check if the user is asking about AI.\"}</code></p>\n            <p><strong>Output</strong>: <code>{\"output\": \"user is not asking about AI\"}</code></p>\n        </li>\n        <li>\n            <p><strong>Input</strong>: <code>{\"input\": \"What is AIGC?\", \"scenarios\": [\"user is asking about AI\", \"user is asking about the weather\"], \"instruction\": \"Your task is to check and see if the user is asking a topic about AI.\"}</code></p>\n            <p><strong>Output</strong>: <code>{\"output\": \"user is asking about AI\"}</code></p>\n        </li>\n        <li>\n            <p><strong>Input</strong>: <code>{\"input\": \"Can you explain deep learning?\", \"scenarios\": [\"user is interested in AI topics\", \"user wants to order food\"], \"instruction\": \"Determine if the user is interested in learning about AI.\"}</code></p>\n            <p><strong>Output</strong>: <code>{\"output\": \"user is interested in AI topics\"}</code></p>\n        </li>\n    </ol>\n    <h2>Note</h2>\n    <ul>\n        <li>Ensure that the input scenarios align well with potential user queries for accurate matching.</li>\n        <li>DO NOT include anything other than the JSON in your response.</li>\n    </ul>",
            "description": "Expert use only. Modifying this can significantly alter agent behavior. Leave default if unsure",
            "show": {
              "conditionAgentOverrideSystemPrompt": true
            },
            "id": "conditionAgentAgentflow_0-input-conditionAgentSystemPrompt-string",
            "display": false
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "conditionAgentModel": "chatGoogleGenerativeAI",
          "conditionAgentInstructions": "<p>Dựa vào nội dung câu hỏi của người dùng, hãy xác định họ đang muốn hỏi về chủ đề gì để đưa ra phản hồi phù hợp.</p><p>Quy tắc xác định:</p><ul><li><p>Nếu người dùng hỏi về một ngày cụ thể. Câu hỏi đề cập đến một thời điểm rõ ràng, chỉ duy nhất một ngày, ví dụ:</p><ul><li><p>Hôm nay tôi check-in chưa?</p></li><li><p>Ngày 10 tháng 7 tôi vào làm mấy giờ?</p></li><li><p>Tôi có quên chấm công hôm qua không?</p></li><li><p>Giờ check out hôm kia là lúc nào?</p></li><li><p>Thứ 3 tuần trước tôi check in lúc nào?</p></li><li><p>Thứ 5 tuần trước nữa tôi check out mấy giờ?</p></li></ul></li></ul><p>hoặc có chứa các cụm từ gợi ý một ngày cụ thể, như: \"hôm nay\", \"hôm qua\", \"hôm kia\", \"hôm trước\", \"ngày [số]\", \"ngày [số] tháng [số]\", \"thứ 2 tuần trước\", \"thứ 6 vừa rồi\", \"thứ 4 tuần này\", \"thứ 3 vừa qua\" v.v. thì xác định <strong>1 ngày cụ thể</strong>.</p><ul><li><p>Nếu người dùng hỏi về một khoảng thời gian. Câu hỏi đề cập đến một giai đoạn gồm nhiều ngày, ví dụ:</p><ul><li><p>Trong tháng 6 tôi đi làm mấy giờ mỗi ngày?</p></li><li><p>Thời gian check-in của tôi tuần vừa rồi?</p></li><li><p>Có ngày nào trong 2 tuần vừa rồi tôi quên chấm công không?</p></li><li><p>Từ ngày 3/8 đến 18/8 tôi có đi làm đầy đủ không?</p></li></ul></li></ul><p>hoặc chứa các cụm từ thể hiện khoảng thời gian, như: “trong tuần trước”, “trong tháng này”, “2 tuần vừa rồi”, “từ ngày ... đến ngày ...”, “từ thứ 2 đến thứ 6”, v.v. thì xác định <strong>1 khoảng thời gian cụ thể</strong>.</p>",
          "conditionAgentInput": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.input\" data-label=\"$flow.state.input\">{{ $flow.state.input }}</span> </p>",
          "conditionAgentScenarios": [
            {
              "scenario": "1 khoảng thời gian cụ thể"
            },
            {
              "scenario": "1 ngày cụ thể"
            }
          ],
          "conditionAgentOverrideSystemPrompt": false,
          "conditionAgentModelConfig": {
            "cache": "",
            "modelName": "gemini-2.5-flash-preview-05-20",
            "customModelName": "",
            "temperature": 0.9,
            "streaming": true,
            "maxOutputTokens": "",
            "topP": "",
            "topK": "",
            "safetySettings": "",
            "baseUrl": "",
            "allowImageUploads": "",
            "conditionAgentModel": "chatGoogleGenerativeAI"
          },
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "conditionAgentAgentflow_0-output-0",
            "label": "Condition Agent",
            "name": "conditionAgentAgentflow"
          },
          {
            "id": "conditionAgentAgentflow_0-output-1",
            "label": "Condition Agent",
            "name": "conditionAgentAgentflow"
          }
        ],
        "outputs": {
          "conditionAgentAgentflow": ""
        },
        "selected": false
      },
      "type": "agentFlow",
      "width": 283,
      "height": 80,
      "selected": false,
      "positionAbsolute": {
        "x": 208.4539627284688,
        "y": 55.36077900277823
      },
      "dragging": false
    },
    {
      "id": "toolAgentflow_0",
      "position": {
        "x": 550,
        "y": -25
      },
      "data": {
        "id": "toolAgentflow_0",
        "label": "Current Time",
        "version": 1.1,
        "name": "toolAgentflow",
        "type": "Tool",
        "color": "#d4a373",
        "baseClasses": [
          "Tool"
        ],
        "category": "Agent Flows",
        "description": "Tools allow LLM to interact with external systems",
        "inputParams": [
          {
            "label": "Tool",
            "name": "toolAgentflowSelectedTool",
            "type": "asyncOptions",
            "loadMethod": "listTools",
            "loadConfig": true,
            "id": "toolAgentflow_0-input-toolAgentflowSelectedTool-asyncOptions",
            "display": true
          },
          {
            "label": "Tool Input Arguments",
            "name": "toolInputArgs",
            "type": "array",
            "acceptVariable": true,
            "refresh": true,
            "array": [
              {
                "label": "Input Argument Name",
                "name": "inputArgName",
                "type": "asyncOptions",
                "loadMethod": "listToolInputArgs",
                "refresh": true
              },
              {
                "label": "Input Argument Value",
                "name": "inputArgValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "show": {
              "toolAgentflowSelectedTool": ".+"
            },
            "id": "toolAgentflow_0-input-toolInputArgs-array",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "toolUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "toolAgentflow_0-input-toolUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "toolAgentflowSelectedTool": "currentDateTime",
          "toolInputArgs": "",
          "toolUpdateState": "",
          "toolAgentflowSelectedToolConfig": {
            "toolAgentflowSelectedTool": "currentDateTime"
          }
        },
        "outputAnchors": [
          {
            "id": "toolAgentflow_0-output-toolAgentflow",
            "label": "Tool",
            "name": "toolAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 157,
      "height": 68,
      "selected": false,
      "positionAbsolute": {
        "x": 550,
        "y": -25
      },
      "dragging": false
    },
    {
      "id": "toolAgentflow_1",
      "position": {
        "x": 550,
        "y": 125
      },
      "data": {
        "id": "toolAgentflow_1",
        "label": "Current Time",
        "version": 1.1,
        "name": "toolAgentflow",
        "type": "Tool",
        "color": "#d4a373",
        "baseClasses": [
          "Tool"
        ],
        "category": "Agent Flows",
        "description": "Tools allow LLM to interact with external systems",
        "inputParams": [
          {
            "label": "Tool",
            "name": "toolAgentflowSelectedTool",
            "type": "asyncOptions",
            "loadMethod": "listTools",
            "loadConfig": true,
            "id": "toolAgentflow_1-input-toolAgentflowSelectedTool-asyncOptions",
            "display": true
          },
          {
            "label": "Tool Input Arguments",
            "name": "toolInputArgs",
            "type": "array",
            "acceptVariable": true,
            "refresh": true,
            "array": [
              {
                "label": "Input Argument Name",
                "name": "inputArgName",
                "type": "asyncOptions",
                "loadMethod": "listToolInputArgs",
                "refresh": true
              },
              {
                "label": "Input Argument Value",
                "name": "inputArgValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "show": {
              "toolAgentflowSelectedTool": ".+"
            },
            "id": "toolAgentflow_1-input-toolInputArgs-array",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "toolUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "toolAgentflow_1-input-toolUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "toolAgentflowSelectedTool": "currentDateTime",
          "toolInputArgs": "",
          "toolUpdateState": "",
          "toolAgentflowSelectedToolConfig": {
            "toolAgentflowSelectedTool": "currentDateTime"
          }
        },
        "outputAnchors": [
          {
            "id": "toolAgentflow_1-output-toolAgentflow",
            "label": "Tool",
            "name": "toolAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 157,
      "height": 68,
      "selected": false,
      "positionAbsolute": {
        "x": 550,
        "y": 125
      },
      "dragging": false
    },
    {
      "id": "stickyNoteAgentflow_0",
      "position": {
        "x": 485.8633567643491,
        "y": -97.64389279405819
      },
      "data": {
        "id": "stickyNoteAgentflow_0",
        "label": "Sticky Note",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_0-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "A specific time range"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_0-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 61,
      "selected": false,
      "positionAbsolute": {
        "x": 485.8633567643491,
        "y": -97.64389279405819
      },
      "dragging": false
    },
    {
      "id": "stickyNoteAgentflow_1",
      "position": {
        "x": 488.2194639702909,
        "y": 210.07798769570184
      },
      "data": {
        "id": "stickyNoteAgentflow_1",
        "label": "Sticky Note",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_1-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "A specific date"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_1-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 61,
      "selected": false,
      "positionAbsolute": {
        "x": 488.2194639702909,
        "y": 210.07798769570184
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_2",
      "position": {
        "x": 777.5065450633465,
        "y": -69.63376474702807
      },
      "data": {
        "id": "customFunctionAgentflow_2",
        "label": "Parse current time",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_2-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_2-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_2-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "currentTime",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"toolAgentflow_0\" data-label=\"toolAgentflow_0\">{{ toolAgentflow_0 }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "let currentTime = JSON.parse($currentTime);\n\nreturn `${ currentTime.day }, ${ currentTime.date }`",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_2-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 191,
      "height": 65,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": 777.5065450633465,
        "y": -69.63376474702807
      }
    },
    {
      "id": "customFunctionAgentflow_3",
      "position": {
        "x": 776.5873449586655,
        "y": 139.02465901555885
      },
      "data": {
        "id": "customFunctionAgentflow_3",
        "label": "Parse current time",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_3-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_3-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_3-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "currentTime",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"toolAgentflow_1\" data-label=\"toolAgentflow_1\">{{ toolAgentflow_1 }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "let currentTime = JSON.parse($currentTime);\n\nreturn `${ currentTime.day }, ${ currentTime.date }`",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_3-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 191,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 776.5873449586655,
        "y": 139.02465901555885
      },
      "dragging": false
    },
    {
      "id": "llmAgentflow_0",
      "position": {
        "x": 1026.9133478081717,
        "y": -19.704053574305576
      },
      "data": {
        "id": "llmAgentflow_0",
        "label": "Date Range Parser",
        "version": 1,
        "name": "llmAgentflow",
        "type": "LLM",
        "color": "#64B5F6",
        "baseClasses": [
          "LLM"
        ],
        "category": "Agent Flows",
        "description": "Large language models to analyze user-provided inputs and generate responses",
        "inputParams": [
          {
            "label": "Model",
            "name": "llmModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "llmAgentflow_0-input-llmModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "llmMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "llmAgentflow_0-input-llmMessages-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "llmEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "llmAgentflow_0-input-llmEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "llmMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "llmEnableMemory": true
            },
            "id": "llmAgentflow_0-input-llmMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "llmMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "llmMemoryType": "windowSize"
            },
            "id": "llmAgentflow_0-input-llmMemoryWindowSize-number",
            "display": false
          },
          {
            "label": "Max Token Limit",
            "name": "llmMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "llmMemoryType": "conversationSummaryBuffer"
            },
            "id": "llmAgentflow_0-input-llmMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "llmUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "llmEnableMemory": true
            },
            "id": "llmAgentflow_0-input-llmUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "llmReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "llmAgentflow_0-input-llmReturnResponseAs-options",
            "display": true
          },
          {
            "label": "JSON Structured Output",
            "name": "llmStructuredOutput",
            "description": "Instruct the LLM to give output in a JSON structured schema",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string"
              },
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "String Array",
                    "name": "stringArray"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  },
                  {
                    "label": "Enum",
                    "name": "enum"
                  },
                  {
                    "label": "JSON Array",
                    "name": "jsonArray"
                  }
                ]
              },
              {
                "label": "Enum Values",
                "name": "enumValues",
                "type": "string",
                "placeholder": "value1, value2, value3",
                "description": "Enum values. Separated by comma",
                "optional": true,
                "show": {
                  "llmStructuredOutput[$index].type": "enum"
                }
              },
              {
                "label": "JSON Schema",
                "name": "jsonSchema",
                "type": "code",
                "placeholder": "{\n    \"answer\": {\n        \"type\": \"string\",\n        \"description\": \"Value of the answer\"\n    },\n    \"reason\": {\n        \"type\": \"string\",\n        \"description\": \"Reason for the answer\"\n    },\n    \"optional\": {\n        \"type\": \"boolean\"\n    },\n    \"count\": {\n        \"type\": \"number\"\n    },\n    \"children\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"string\",\n                    \"description\": \"Value of the children's answer\"\n                }\n            }\n        }\n    }\n}",
                "description": "JSON schema for the structured output",
                "optional": true,
                "hideCodeExecute": true,
                "show": {
                  "llmStructuredOutput[$index].type": "jsonArray"
                }
              },
              {
                "label": "Description",
                "name": "description",
                "type": "string",
                "placeholder": "Description of the key"
              }
            ],
            "id": "llmAgentflow_0-input-llmStructuredOutput-array",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "llmUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "llmAgentflow_0-input-llmUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "llmModel": "chatGoogleGenerativeAI",
          "llmMessages": [
            {
              "role": "system",
              "content": "<p>Dựa vào nội dung câu hỏi của người dùng và các thông tin ngữ cảnh hiện tại, hãy xác định chính xác khoảng thời gian mà người dùng nhắc đến dưới dạng start_date và end_date theo định dạng YYYY-MM-DD.</p><p>Ngữ cảnh hiện tại:</p><ul><li><p>Ngày hiện tại: <span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_2\" data-label=\"customFunctionAgentflow_2\">{{ customFunctionAgentflow_2 }}</span> </p></li></ul><p>Nguyên tắc xử lý:</p><ul><li><p>Nhận diện các cụm từ chỉ khoảng thời gian như:</p><ul><li><p>“từ [ngày/tháng/thứ] ... đến [ngày/tháng/thứ]”</p></li><li><p>“từ ngày ... đến ngày ...”</p></li></ul></li></ul><ul><li><p>Giải thích tương đối các cụm thời gian bằng cách dựa trên ngày hiện tại (theo định dạng YYYY-MM-DD).</p><ul><li><p>Nếu người dùng chỉ nói \"từ mùng 1 đến mùng 6\", hiểu là cùng tháng với ngày hiện tại (ví dụ: nếu ngày hiện tại là 2025-03-08 -&gt; khoảng thời gian là 2025-03-01 đến 2025-03-06)</p></li><li><p>Nếu người dùng nói \"từ thứ 3 tuần trước đến thứ 3 tuần này\", sử dụng logic tính toán tuần để xác định đúng các ngày tương ứng</p></li><li><p>Nếu người dùng nói \"từ 15 tháng trước đến 15 tháng này\", lấy ngày 15 của tháng trước và tháng hiện tại dựa trên current_date</p></li></ul></li></ul><p>Ví dụ:</p><ul><li><p>Nếu current_date là 2025-03-08 và người dùng hỏi: \"Từ mùng 1 đến mùng 6\" thì kết quả tính toán được sẽ là: \"start_date\": \"2025-03-01\", \"end_date\": \"2025-03-06\"</p></li><li><p>Nếu current_date là 2025-03-08 và người dùng hỏi: \"Từ 15 tháng trước đến 15 tháng này\" thì kết quả tính toán được sẽ là: \"start_date\": \"2025-02-15\", \"end_date\": \"2025-03-15\"</p></li><li><p>Nếu current_date là 2025-03-08 và người dùng hỏi: \"Từ thứ 3 tuần trước đến thứ 3 tuần này\" thì kết quả tính toán được sẽ là: \"start_date\": \"2025-02-25\", \"end_date\": \"2025-03-04\" (do 25/2 là thứ Ba tuần trước, 4/3 là thứ Ba tuần này)</p></li><li><p>Nếu current_date là 2025-03-08 và người dùng hỏi: \"tuần trước\" thì kết quả tính toán được sẽ là: \"start_date\": \"2025-02-24\", \"end_date\": \"2025-03-02\"</p></li><li><p>Nếu current_date là 2025-03-08 và người dùng hỏi: \"tuần này\" thì kết quả tính toán được sẽ là: \"start_date\": \"2025-03-03\", \"end_date\": \"2025-03-08\"</p></li><li><p>Nếu current_date là 2025-03-08 và người dùng hỏi: \"hai tuần vừa rồi\" thì kết quả tính toán được sẽ là: \"start_date\": \"2025-02-19\", \"end_date\": \"2025-03-04\"</p></li><li><p>Nếu current_date là 2025-03-08 và người dùng hỏi: \"ba ngày gần nhất\" thì kết quả tính toán được sẽ là: \"start_date\": \"2025-03-05\", \"end_date\": \"2025-03-07\"</p></li><li><p>Nếu current_date là 2025-03-08 và người dùng hỏi: \"ba ngày vừa qua\" thì kết quả tính toán được sẽ là: \"start_date\": \"2025-03-05\", \"end_date\": \"2025-03-07\"</p></li><li><p>Nếu current_date là 2025-03-08 và người dùng hỏi: \"tháng này\" thì kết quả tính toán được sẽ là: \"start_date\": \"2025-03-01\", \"end_date\": \"2025-03-08\"</p></li><li><p>Nếu current_date là 2025-03-08 và người dùng hỏi: \"tháng trước\" thì kết quả tính toán được sẽ là: \"start_date\": \"2025-02-01\", \"end_date\": \"2025-02-29\"</p></li><li><p>Nếu current_date là 2025-03-08 và người dùng hỏi: \"nửa đầu tháng này\" thì kết quả tính toán được sẽ là: \"start_date\": \"2025-03-01\", \"end_date\": \"2025-03-08\"</p></li></ul>"
            }
          ],
          "llmEnableMemory": true,
          "llmReturnResponseAs": "assistantMessage",
          "llmStructuredOutput": [
            {
              "key": "start_date",
              "type": "string",
              "enumValues": "",
              "jsonSchema": "",
              "description": "Start date"
            },
            {
              "key": "end_date",
              "type": "string",
              "enumValues": "",
              "jsonSchema": "",
              "description": "End date"
            }
          ],
          "llmUpdateState": "",
          "llmModelConfig": {
            "cache": "",
            "modelName": "gemini-2.5-pro-preview-03-25",
            "customModelName": "",
            "temperature": 0.9,
            "streaming": true,
            "maxOutputTokens": "",
            "topP": "",
            "topK": "",
            "safetySettings": "",
            "baseUrl": "",
            "allowImageUploads": "",
            "llmModel": "chatGoogleGenerativeAI"
          },
          "llmUserMessage": "<p></p>"
        },
        "outputAnchors": [
          {
            "id": "llmAgentflow_0-output-llmAgentflow",
            "label": "LLM",
            "name": "llmAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 275,
      "height": 72,
      "selected": false,
      "positionAbsolute": {
        "x": 1026.9133478081717,
        "y": -19.704053574305576
      },
      "dragging": false
    },
    {
      "id": "llmAgentflow_1",
      "position": {
        "x": 1028.0902545639892,
        "y": 111.23185772696519
      },
      "data": {
        "id": "llmAgentflow_1",
        "label": "Date Parser",
        "version": 1,
        "name": "llmAgentflow",
        "type": "LLM",
        "color": "#64B5F6",
        "baseClasses": [
          "LLM"
        ],
        "category": "Agent Flows",
        "description": "Large language models to analyze user-provided inputs and generate responses",
        "inputParams": [
          {
            "label": "Model",
            "name": "llmModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "llmAgentflow_1-input-llmModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "llmMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "llmAgentflow_1-input-llmMessages-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "llmEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "llmAgentflow_1-input-llmEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "llmMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "llmEnableMemory": true
            },
            "id": "llmAgentflow_1-input-llmMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "llmMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "llmMemoryType": "windowSize"
            },
            "id": "llmAgentflow_1-input-llmMemoryWindowSize-number",
            "display": true
          },
          {
            "label": "Max Token Limit",
            "name": "llmMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "llmMemoryType": "conversationSummaryBuffer"
            },
            "id": "llmAgentflow_1-input-llmMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "llmUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "llmEnableMemory": true
            },
            "id": "llmAgentflow_1-input-llmUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "llmReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "llmAgentflow_1-input-llmReturnResponseAs-options",
            "display": true
          },
          {
            "label": "JSON Structured Output",
            "name": "llmStructuredOutput",
            "description": "Instruct the LLM to give output in a JSON structured schema",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string"
              },
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "String Array",
                    "name": "stringArray"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  },
                  {
                    "label": "Enum",
                    "name": "enum"
                  },
                  {
                    "label": "JSON Array",
                    "name": "jsonArray"
                  }
                ]
              },
              {
                "label": "Enum Values",
                "name": "enumValues",
                "type": "string",
                "placeholder": "value1, value2, value3",
                "description": "Enum values. Separated by comma",
                "optional": true,
                "show": {
                  "llmStructuredOutput[$index].type": "enum"
                }
              },
              {
                "label": "JSON Schema",
                "name": "jsonSchema",
                "type": "code",
                "placeholder": "{\n    \"answer\": {\n        \"type\": \"string\",\n        \"description\": \"Value of the answer\"\n    },\n    \"reason\": {\n        \"type\": \"string\",\n        \"description\": \"Reason for the answer\"\n    },\n    \"optional\": {\n        \"type\": \"boolean\"\n    },\n    \"count\": {\n        \"type\": \"number\"\n    },\n    \"children\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"string\",\n                    \"description\": \"Value of the children's answer\"\n                }\n            }\n        }\n    }\n}",
                "description": "JSON schema for the structured output",
                "optional": true,
                "hideCodeExecute": true,
                "show": {
                  "llmStructuredOutput[$index].type": "jsonArray"
                }
              },
              {
                "label": "Description",
                "name": "description",
                "type": "string",
                "placeholder": "Description of the key"
              }
            ],
            "id": "llmAgentflow_1-input-llmStructuredOutput-array",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "llmUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "llmAgentflow_1-input-llmUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "llmModel": "chatGoogleGenerativeAI",
          "llmMessages": [
            {
              "role": "system",
              "content": "<p>Hãy chỉ tập trung vào hướng dẫn dưới đây và hoàn toàn bỏ qua bất kỳ nội dung nào khác, kể cả các user messages được truyền vào từ hệ thống hoặc các node phía trước. Tuyệt đối không tham chiếu hoặc phản hồi đến những thông tin ngoài phần hướng dẫn này.</p><p>Nhiệm vụ:</p><ul><li><p>Dựa vào nội dung câu hỏi của người dùng và các thông tin ngữ cảnh hiện tại, hãy xác định chính xác một ngày cụ thể mà người dùng đang nhắc đến dưới dạng current_time theo định dạng YYYY-MM-DD.</p></li></ul><p>Ngữ cảnh hiện tại:</p><ul><li><p>Ngày hiện tại: <span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_3\" data-label=\"customFunctionAgentflow_3\">{{ customFunctionAgentflow_3 }}</span></p></li></ul><p>Câu hỏi người dùng:</p><p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.input\" data-label=\"$flow.state.input\">{{ $flow.state.input }}</span> </p><p>Nguyên tắc xử lý:</p><ul><li><p>Nhận diện các cụm từ mô tả ngày cụ thể, bao gồm:</p><ul><li><p>\"hôm qua\", \"hôm nay\", \"hôm trước\", \"hôm kia\", \"hôm kìa\"</p></li><li><p>\"ngày 5\", \"mùng 3\"</p></li><li><p>\"thứ 2\", \"thứ ba tuần trước\", \"thứ năm tuần này\"</p></li><li><p>\"ngày 15 tháng 6\", \"ngày 2 tháng trước\", v.v.</p></li></ul></li><li><p>Giải thích các cụm thời gian tương đối dựa trên current_date:</p><ul><li><p>“hôm nay” → chính là current_date</p></li><li><p>“hôm qua” → current_date - 1 ngày</p></li><li><p>“hôm trước” → current_date - 2 ngày</p></li><li><p>“hôm kia” → current_date - 2 ngày</p></li><li><p>“hôm kìa” → current_date - 3 ngày</p></li><li><p>“thứ [x] tuần này” → ngày gần nhất ứng với thứ đó trong cùng tuần với current_date</p></li><li><p>“thứ [x] tuần trước” → ngày tương ứng với thứ đó của tuần trước</p></li><li><p>“ngày [số]” hoặc “mùng [số]” → cùng tháng với current_date</p></li><li><p>“ngày [số] tháng [số]” → sử dụng năm của current_date, trừ khi người dùng nói rõ năm</p></li><li><p>“ngày [số] tháng trước” → ngày tương ứng của tháng trước</p></li><li><p>“ngày [số] tháng này” → ngày tương ứng của tháng hiện tại</p></li></ul></li></ul><p>Ví dụ:</p><ul><li><p>Nếu current_date là 2025-03-08 và người dùng hỏi: “Tôi check in hôm qua lúc mấy giờ?” thì kết quả tính toán được sẽ là: current_time: \"2025-03-07\"</p></li></ul><ul><li><p>Nếu người dùng nói: “Ngày 2 tháng trước tôi nghỉ phép” thì kết quả tính toán được sẽ là: current_time: \"2025-02-02\"</p></li></ul><ul><li><p>Nếu người dùng nói: “Thứ ba tuần này tôi đến trễ” thì kết quả tính toán được sẽ là: current_time: \"2025-03-04\"</p></li></ul>"
            }
          ],
          "llmEnableMemory": true,
          "llmReturnResponseAs": "assistantMessage",
          "llmStructuredOutput": [
            {
              "key": "start_date",
              "type": "string",
              "enumValues": "",
              "jsonSchema": "",
              "description": "Start date"
            },
            {
              "key": "end_date",
              "type": "string",
              "enumValues": "",
              "jsonSchema": "",
              "description": "End date"
            }
          ],
          "llmUpdateState": "",
          "llmModelConfig": {
            "cache": "",
            "modelName": "gemini-2.5-pro-preview-03-25",
            "customModelName": "",
            "temperature": 0.9,
            "streaming": true,
            "maxOutputTokens": "",
            "topP": "",
            "topK": "",
            "safetySettings": "",
            "baseUrl": "",
            "allowImageUploads": "",
            "llmModel": "chatGoogleGenerativeAI"
          },
          "llmMemoryType": "windowSize",
          "llmMemoryWindowSize": "0",
          "llmUserMessage": "<p></p>"
        },
        "outputAnchors": [
          {
            "id": "llmAgentflow_1-output-llmAgentflow",
            "label": "LLM",
            "name": "llmAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 275,
      "height": 72,
      "selected": false,
      "positionAbsolute": {
        "x": 1028.0902545639892,
        "y": 111.23185772696519
      },
      "dragging": false
    },
    {
      "id": "conditionAgentAgentflow_1",
      "position": {
        "x": -141.9443385728438,
        "y": 172.87956872094895
      },
      "data": {
        "id": "conditionAgentAgentflow_1",
        "label": "Is time identifiable?",
        "version": 1.1,
        "name": "conditionAgentAgentflow",
        "type": "ConditionAgent",
        "color": "#ff8fab",
        "baseClasses": [
          "ConditionAgent"
        ],
        "category": "Agent Flows",
        "description": "Utilize an agent to split flows based on dynamic conditions",
        "inputParams": [
          {
            "label": "Model",
            "name": "conditionAgentModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "conditionAgentAgentflow_1-input-conditionAgentModel-asyncOptions",
            "display": true
          },
          {
            "label": "Instructions",
            "name": "conditionAgentInstructions",
            "type": "string",
            "description": "A general instructions of what the condition agent should do",
            "rows": 4,
            "acceptVariable": true,
            "placeholder": "Determine if the user is interested in learning about AI",
            "id": "conditionAgentAgentflow_1-input-conditionAgentInstructions-string",
            "display": true
          },
          {
            "label": "Input",
            "name": "conditionAgentInput",
            "type": "string",
            "description": "Input to be used for the condition agent",
            "rows": 4,
            "acceptVariable": true,
            "default": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span> </p>",
            "id": "conditionAgentAgentflow_1-input-conditionAgentInput-string",
            "display": true
          },
          {
            "label": "Scenarios",
            "name": "conditionAgentScenarios",
            "description": "Define the scenarios that will be used as the conditions to split the flow",
            "type": "array",
            "array": [
              {
                "label": "Scenario",
                "name": "scenario",
                "type": "string",
                "placeholder": "User is asking for a pizza"
              }
            ],
            "default": [
              {
                "scenario": ""
              },
              {
                "scenario": ""
              }
            ],
            "id": "conditionAgentAgentflow_1-input-conditionAgentScenarios-array",
            "display": true
          },
          {
            "label": "Override System Prompt",
            "name": "conditionAgentOverrideSystemPrompt",
            "type": "boolean",
            "description": "Override initial system prompt for Condition Agent",
            "optional": true,
            "id": "conditionAgentAgentflow_1-input-conditionAgentOverrideSystemPrompt-boolean",
            "display": true
          },
          {
            "label": "Node System Prompt",
            "name": "conditionAgentSystemPrompt",
            "type": "string",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "default": "<p>You are part of a multi-agent system designed to make agent coordination and execution easy. Your task is to analyze the given input and select one matching scenario from a provided set of scenarios.</p>\n    <ul>\n        <li><strong>Input</strong>: A string representing the user's query, message or data.</li>\n        <li><strong>Scenarios</strong>: A list of predefined scenarios that relate to the input.</li>\n        <li><strong>Instruction</strong>: Determine which of the provided scenarios is the best fit for the input.</li>\n    </ul>\n    <h2>Steps</h2>\n    <ol>\n        <li><strong>Read the input string</strong> and the list of scenarios.</li>\n        <li><strong>Analyze the content of the input</strong> to identify its main topic or intention.</li>\n        <li><strong>Compare the input with each scenario</strong>: Evaluate how well the input's topic or intention aligns with each of the provided scenarios and select the one that is the best fit.</li>\n        <li><strong>Output the result</strong>: Return the selected scenario in the specified JSON format.</li>\n    </ol>\n    <h2>Output Format</h2>\n    <p>Output should be a JSON object that names the selected scenario, like this: <code>{\"output\": \"<selected_scenario_name>\"}</code>. No explanation is needed.</p>\n    <h2>Examples</h2>\n    <ol>\n       <li>\n            <p><strong>Input</strong>: <code>{\"input\": \"Hello\", \"scenarios\": [\"user is asking about AI\", \"user is not asking about AI\"], \"instruction\": \"Your task is to check if the user is asking about AI.\"}</code></p>\n            <p><strong>Output</strong>: <code>{\"output\": \"user is not asking about AI\"}</code></p>\n        </li>\n        <li>\n            <p><strong>Input</strong>: <code>{\"input\": \"What is AIGC?\", \"scenarios\": [\"user is asking about AI\", \"user is asking about the weather\"], \"instruction\": \"Your task is to check and see if the user is asking a topic about AI.\"}</code></p>\n            <p><strong>Output</strong>: <code>{\"output\": \"user is asking about AI\"}</code></p>\n        </li>\n        <li>\n            <p><strong>Input</strong>: <code>{\"input\": \"Can you explain deep learning?\", \"scenarios\": [\"user is interested in AI topics\", \"user wants to order food\"], \"instruction\": \"Determine if the user is interested in learning about AI.\"}</code></p>\n            <p><strong>Output</strong>: <code>{\"output\": \"user is interested in AI topics\"}</code></p>\n        </li>\n    </ol>\n    <h2>Note</h2>\n    <ul>\n        <li>Ensure that the input scenarios align well with potential user queries for accurate matching.</li>\n        <li>DO NOT include anything other than the JSON in your response.</li>\n    </ul>",
            "description": "Expert use only. Modifying this can significantly alter agent behavior. Leave default if unsure",
            "show": {
              "conditionAgentOverrideSystemPrompt": true
            },
            "id": "conditionAgentAgentflow_1-input-conditionAgentSystemPrompt-string",
            "display": false
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "conditionAgentModel": "chatGoogleGenerativeAI",
          "conditionAgentInstructions": "<p>Hãy xác định xem câu hỏi của người dùng có đề cập đến thông tin về thời gian hay không.</p><p>Quy tắc xác định:</p><ul><li><p>Nếu người dùng có đề cập đến thông tin thời gian<strong> </strong>bao gồm ngày, tháng, năm, tuần, hoặc các từ khóa chỉ mốc thời gian cụ thể hoặc tương đối như:</p><ul><li><p>“hôm nay”, “ngày mai”, “hôm qua”</p></li><li><p>“tuần này”, “tháng trước”, “quý này”</p></li><li><p>“ngày 1/8”, “tháng 7”, “năm 2025”</p></li><li><p>“lúc 8 giờ”, “9h sáng”, “chiều nay”</p></li><li><p>“trong 3 ngày gần đây”, “7 ngày qua”, “cuối tuần”</p></li></ul></li></ul><p>thì xác định <strong>Có đề cập đến thời gian</strong></p><ul><li><p>Nếu người dùng không đề cập đến bất kỳ thời gian nào<strong>, </strong>câu hỏi không có thông tin thời gian, không thể xác định được mốc thời gian liên quan, ví dụ:</p><ul><li><p>“Tôi đã check-in chưa?”</p></li><li><p>\"Tôi check in lúc nào?\"</p></li><li><p>“Tôi check-out mấy giờ?”</p></li><li><p>“Giờ vào là lúc nào?”</p></li><li><p>\"Tôi đi muộn không?\"</p></li><li><p>\"Tôi được bao nhiêu ngày công?\"</p></li><li><p>\"Thời gian check in thì sao?\"</p></li><li><p>\"Còn thời gian chek out của tôi?\"</p></li></ul></li></ul><p>hoặc không chứa các từ khóa thời gian như “hôm nay”, “ngày”, “tháng”, “tuần”, v.v. thì xác định <strong>Không đề cập đến thời gian</strong></p>",
          "conditionAgentInput": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.input\" data-label=\"$flow.state.input\">{{ $flow.state.input }}</span> </p>",
          "conditionAgentScenarios": [
            {
              "scenario": "Có đề cập đến thời gian"
            },
            {
              "scenario": "Không đề cập đến thời gian"
            }
          ],
          "conditionAgentOverrideSystemPrompt": "",
          "conditionAgentModelConfig": {
            "cache": "",
            "modelName": "gemini-2.5-pro-preview-03-25",
            "customModelName": "",
            "temperature": 0.9,
            "streaming": true,
            "maxOutputTokens": "",
            "topP": "",
            "topK": "",
            "safetySettings": "",
            "baseUrl": "",
            "allowImageUploads": "",
            "conditionAgentModel": "chatGoogleGenerativeAI"
          },
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "conditionAgentAgentflow_1-output-0",
            "label": "Condition Agent",
            "name": "conditionAgentAgentflow"
          },
          {
            "id": "conditionAgentAgentflow_1-output-1",
            "label": "Condition Agent",
            "name": "conditionAgentAgentflow"
          }
        ],
        "outputs": {
          "conditionAgentAgentflow": ""
        },
        "selected": false
      },
      "type": "agentFlow",
      "width": 275,
      "height": 80,
      "selected": false,
      "positionAbsolute": {
        "x": -141.9443385728438,
        "y": 172.87956872094895
      },
      "dragging": false
    },
    {
      "id": "stickyNoteAgentflow_2",
      "position": {
        "x": 206.8138383942834,
        "y": -24.279606982763426
      },
      "data": {
        "id": "stickyNoteAgentflow_2",
        "label": "Sticky Note",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_2-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "Time context changed"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_2-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 61,
      "selected": false,
      "positionAbsolute": {
        "x": 206.8138383942834,
        "y": -24.279606982763426
      },
      "dragging": false
    },
    {
      "id": "stickyNoteAgentflow_3",
      "position": {
        "x": 464.60661579082927,
        "y": 546.4065320325865
      },
      "data": {
        "id": "stickyNoteAgentflow_3",
        "label": "Sticky Note",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_3-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "Time context has not changed"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_3-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 81,
      "selected": false,
      "positionAbsolute": {
        "x": 464.60661579082927,
        "y": 546.4065320325865
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_1",
      "position": {
        "x": -1027.2599861474343,
        "y": 75.60271303400974
      },
      "data": {
        "id": "customFunctionAgentflow_1",
        "label": "Parse Input",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_1-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_1-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_1-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "input",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const [ user_id, input ] = $input.split( \"|\" )\nreturn input",
          "customFunctionUpdateState": [
            {
              "key": "input",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output\" data-label=\"output\">{{ output }}</span></p>"
            }
          ],
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_1-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 145,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": -1027.2599861474343,
        "y": 75.60271303400974
      },
      "dragging": false
    },
    {
      "id": "conditionAgentflow_0",
      "position": {
        "x": 210.28646168913448,
        "y": 365.97608854163093
      },
      "data": {
        "id": "conditionAgentflow_0",
        "label": "Has time context?",
        "version": 1,
        "name": "conditionAgentflow",
        "type": "Condition",
        "color": "#FFB938",
        "baseClasses": [
          "Condition"
        ],
        "category": "Agent Flows",
        "description": "Split flows based on If Else conditions",
        "inputParams": [
          {
            "label": "Conditions",
            "name": "conditions",
            "type": "array",
            "description": "Values to compare",
            "acceptVariable": true,
            "default": [
              {
                "type": "string",
                "value1": "",
                "operation": "equal",
                "value2": ""
              }
            ],
            "array": [
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  }
                ],
                "default": "string"
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "string",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Contains",
                    "name": "contains"
                  },
                  {
                    "label": "Ends With",
                    "name": "endsWith"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Contains",
                    "name": "notContains"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Regex",
                    "name": "regex"
                  },
                  {
                    "label": "Starts With",
                    "name": "startsWith"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "string",
                "default": "",
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                },
                "hide": {
                  "conditions[$index].operation": [
                    "isEmpty",
                    "notEmpty"
                  ]
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "number",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Smaller",
                    "name": "smaller"
                  },
                  {
                    "label": "Smaller Equal",
                    "name": "smallerEqual"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Larger",
                    "name": "larger"
                  },
                  {
                    "label": "Larger Equal",
                    "name": "largerEqual"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "number",
                "default": 0,
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "boolean",
                "default": false,
                "description": "First value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "boolean",
                "default": false,
                "description": "Second value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              }
            ],
            "id": "conditionAgentflow_0-input-conditions-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "conditions": [
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.start_date\" data-label=\"$flow.state.start_date\">{{ $flow.state.start_date }}</span> </p>",
              "operation": "equal",
              "value2": "<p></p>"
            },
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.end_date\" data-label=\"$flow.state.end_date\">{{ $flow.state.end_date }}</span> </p>",
              "operation": "equal",
              "value2": "<p></p>"
            }
          ],
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "conditionAgentflow_0-output-0",
            "label": 0,
            "name": 0,
            "description": "Condition 0"
          },
          {
            "id": "conditionAgentflow_0-output-1",
            "label": 1,
            "name": 1,
            "description": "Condition 1"
          },
          {
            "id": "conditionAgentflow_0-output-2",
            "label": 2,
            "name": 2,
            "description": "Else"
          }
        ],
        "outputs": {
          "conditionAgentflow": ""
        },
        "selected": false
      },
      "type": "agentFlow",
      "width": 188,
      "height": 100,
      "selected": false,
      "positionAbsolute": {
        "x": 210.28646168913448,
        "y": 365.97608854163093
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_4",
      "position": {
        "x": 471.7772890128981,
        "y": 341.70474764896267
      },
      "data": {
        "id": "customFunctionAgentflow_4",
        "label": "Return \"No\"",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_4-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_4-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_4-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": "",
          "customFunctionJavascriptFunction": "return \"No\"",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_4-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 150,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 471.7772890128981,
        "y": 341.70474764896267
      },
      "dragging": false
    },
    {
      "id": "stickyNoteAgentflow_4",
      "position": {
        "x": 648.7549083758322,
        "y": 386.10590535536306
      },
      "data": {
        "id": "stickyNoteAgentflow_4",
        "label": "Sticky Note",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_4-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "Time context is unidentifiable"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_4-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 81,
      "selected": false,
      "positionAbsolute": {
        "x": 648.7549083758322,
        "y": 386.10590535536306
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_5",
      "position": {
        "x": -458.34233561344433,
        "y": 84.71763098630063
      },
      "data": {
        "id": "customFunctionAgentflow_5",
        "label": "Get End Date from Session",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_5-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_5-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_5-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "apiUrl",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.apiUrl\" data-label=\"$flow.state.apiUrl\">{{ $flow.state.apiUrl }}</span> </p>"
            },
            {
              "variableName": "userId",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.userId\" data-label=\"$flow.state.userId\">{{ $flow.state.userId }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const fetch = require( 'node-fetch' )\n\nconst apiUrl = $apiUrl\nconst userId = $userId\n\nconst response = await fetch( `${ apiUrl }/api/session/${ userId }`, {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json',\n    }\n} )\n\nif ( !response.ok ) {\n    return \"No\"\n}\n\nconst result = await response.json()\nreturn result.data.end_date",
          "customFunctionUpdateState": [
            {
              "key": "end_date",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output\" data-label=\"output\">{{ output }}</span></p>"
            }
          ],
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_5-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 245,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": -458.34233561344433,
        "y": 84.71763098630063
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_6",
      "position": {
        "x": -783.8005178987214,
        "y": 125.83099541944702
      },
      "data": {
        "id": "customFunctionAgentflow_6",
        "label": "Get Start Date from Session",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_6-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_6-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_6-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "apiUrl",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.apiUrl\" data-label=\"$flow.state.apiUrl\">{{ $flow.state.apiUrl }}</span> </p>"
            },
            {
              "variableName": "userId",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.userId\" data-label=\"$flow.state.userId\">{{ $flow.state.userId }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const fetch = require( 'node-fetch' )\n\nconst apiUrl = $apiUrl\nconst userId = $userId\n\nconst response = await fetch( `${ apiUrl }/api/session/${ userId }`, {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json',\n    }\n} )\n\nif ( !response.ok ) {\n    return \"No\"\n}\n\nconst result = await response.json()\nreturn result.data.start_date",
          "customFunctionUpdateState": [
            {
              "key": "start_date",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output\" data-label=\"output\">{{ output }}</span></p>"
            }
          ],
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_6-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 252,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": -783.8005178987214,
        "y": 125.83099541944702
      },
      "dragging": false
    },
    {
      "id": "stickyNoteAgentflow_5",
      "position": {
        "x": -140.02851001982708,
        "y": -116.42863679303451
      },
      "data": {
        "id": "stickyNoteAgentflow_5",
        "label": "Sticky Note",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_5-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "Case chưa bắt được vào Không đề cập đến thời gian:\nTôi check in lúc nào?\nTôi check out lúc nào?\nTôi được bao nhiêu ngày công?\nHôm đó tôi có đi muộn không?\nHôm đấy tôi có đi muộn không?"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_5-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 262,
      "selected": false,
      "positionAbsolute": {
        "x": -140.02851001982708,
        "y": -116.42863679303451
      },
      "dragging": false
    },
    {
      "id": "stickyNoteAgentflow_6",
      "position": {
        "x": -1268.1873567806108,
        "y": -159.27868992475123
      },
      "data": {
        "id": "stickyNoteAgentflow_6",
        "label": "Sticky Note",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_6-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "29:1LZVQUxhyhMQA5VKBzO8OyD9wv6xrQaNNmO8nBd2BOEz4G2q6_jIBRlDoI-sLJt_uIyr-4k_xWym19eAgc5HdXQ|hello"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_6-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 162,
      "selected": false,
      "positionAbsolute": {
        "x": -1268.1873567806108,
        "y": -159.27868992475123
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_7",
      "position": {
        "x": 468.2112033304255,
        "y": 443.0886413025862
      },
      "data": {
        "id": "customFunctionAgentflow_7",
        "label": "Return \"No\"",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_7-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_7-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_7-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": "",
          "customFunctionJavascriptFunction": "return \"No\"",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_7-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 150,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 468.2112033304255,
        "y": 443.0886413025862
      },
      "dragging": false
    },
    {
      "id": "stickyNoteAgentflow_7",
      "position": {
        "x": -1103.6187918620262,
        "y": -325.3623649088338
      },
      "data": {
        "id": "stickyNoteAgentflow_7",
        "label": "Sticky Note (7)",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_7-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "Sample Input (separated by |) "
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_7-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 81,
      "selected": false,
      "positionAbsolute": {
        "x": -1103.6187918620262,
        "y": -325.3623649088338
      },
      "dragging": false
    },
    {
      "id": "stickyNoteAgentflow_8",
      "position": {
        "x": -1008.5056819572786,
        "y": -183.1455344500962
      },
      "data": {
        "id": "stickyNoteAgentflow_8",
        "label": "Sticky Note (8)",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_8-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "29:1LZVQUxhyhMQA5VKBzO8OyD9wv6xrQaNNmO8nBd2BOEz4G2q6_jIBRlDoI-sLJt_uIyr-4k_xWym19eAgc5HdXQ|thứ 2 tuần trước tôi check in lúc nào"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_8-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 182,
      "selected": false,
      "positionAbsolute": {
        "x": -1008.5056819572786,
        "y": -183.1455344500962
      },
      "dragging": false
    },
    {
      "id": "stickyNoteAgentflow_9",
      "position": {
        "x": -741.177243836581,
        "y": -183.53290402918225
      },
      "data": {
        "id": "stickyNoteAgentflow_9",
        "label": "Sticky Note (8) (9)",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_9-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "29:1LZVQUxhyhMQA5VKBzO8OyD9wv6xrQaNNmO8nBd2BOEz4G2q6_jIBRlDoI-sLJt_uIyr-4k_xWym19eAgc5HdXQ|thời gian check in của tôi tuần vừa rồi"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_9-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 182,
      "selected": false,
      "positionAbsolute": {
        "x": -741.177243836581,
        "y": -183.53290402918225
      },
      "dragging": false
    },
    {
      "id": "stickyNoteAgentflow_10",
      "position": {
        "x": -457.478230937463,
        "y": -185.24528064157204
      },
      "data": {
        "id": "stickyNoteAgentflow_10",
        "label": "Sticky Note (8) (9) (10)",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_10-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "29:1LZVQUxhyhMQA5VKBzO8OyD9wv6xrQaNNmO8nBd2BOEz4G2q6_jIBRlDoI-sLJt_uIyr-4k_xWym19eAgc5HdXQ|thời gian check out thì sao"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_10-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 162,
      "selected": false,
      "positionAbsolute": {
        "x": -457.478230937463,
        "y": -185.24528064157204
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_12",
      "position": {
        "x": 1393.4894760093034,
        "y": -42.40287778730628
      },
      "data": {
        "id": "customFunctionAgentflow_12",
        "label": "Save time context into Session",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_12-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_12-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_12-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "userId",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.userId\" data-label=\"$flow.state.userId\">{{ $flow.state.userId }}</span> </p>"
            },
            {
              "variableName": "apiUrl",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.apiUrl\" data-label=\"$flow.state.apiUrl\">{{ $flow.state.apiUrl }}</span> </p>"
            },
            {
              "variableName": "result",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"llmAgentflow_0\" data-label=\"llmAgentflow_0\">{{ llmAgentflow_0 }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const fetch = require( 'node-fetch' )\n\nconst result = JSON.parse( $result )\nconst userId = $userId\nconst apiUrl = $apiUrl\n\nconst payload = {\n    session_id: userId,\n    data: {\n        start_date: result.start_date,\n        end_date: result.end_date\n    }\n}\n\nconst response = await fetch( `${ apiUrl }/api/session/upsert`, {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n    body: JSON.stringify( payload )\n} )\n\nif ( !response.ok ) {\n    return \"No\"\n}",
          "customFunctionUpdateState": "",
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_12-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 270,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 1393.4894760093034,
        "y": -42.40287778730628
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_13",
      "position": {
        "x": 1392.6394459428145,
        "y": 141.04448050960616
      },
      "data": {
        "id": "customFunctionAgentflow_13",
        "label": "Save time context into Session",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_13-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_13-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_13-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "userId",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.userId\" data-label=\"$flow.state.userId\">{{ $flow.state.userId }}</span> </p>"
            },
            {
              "variableName": "apiUrl",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.apiUrl\" data-label=\"$flow.state.apiUrl\">{{ $flow.state.apiUrl }}</span> </p>"
            },
            {
              "variableName": "result",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"llmAgentflow_1\" data-label=\"llmAgentflow_1\">{{ llmAgentflow_1 }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const fetch = require( 'node-fetch' )\n\nconst result = JSON.parse( $result )\nconst userId = $userId\nconst apiUrl = $apiUrl\n\nconst payload = {\n    session_id: userId,\n    data: {\n        start_date: result.start_date,\n        end_date: result.end_date\n    }\n}\n\nconst response = await fetch( `${ apiUrl }/api/session/upsert`, {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n    body: JSON.stringify( payload )\n} )\n\nif ( !response.ok ) {\n    return \"No\"\n}",
          "customFunctionUpdateState": "",
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_13-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 270,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 1392.6394459428145,
        "y": 141.04448050960616
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_8",
      "position": {
        "x": -1263.2464524680104,
        "y": 140.75673310445603
      },
      "data": {
        "id": "customFunctionAgentflow_8",
        "label": "Parse User Id",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_8-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_8-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_8-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "input",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const [ user_id, input ] = $input.split( \"|\" )\nreturn user_id",
          "customFunctionUpdateState": [
            {
              "key": "userId",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output\" data-label=\"output\">{{ output }}</span> </p>"
            }
          ]
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_8-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 158,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": -1263.2464524680104,
        "y": 140.75673310445603
      },
      "dragging": false
    },
    {
      "id": "stickyNoteAgentflow_11",
      "position": {
        "x": -469.67763211814963,
        "y": -391.8726387942104
      },
      "data": {
        "id": "stickyNoteAgentflow_11",
        "label": "Sticky Note (8) (9) (10) (11)",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_11-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "29:1LZVQUxhyhMQA5VKBzO8OyD9wv6xrQaNNmO8nBd2BOEz4G2q6_jIBRlDoI-sLJt_uIyr-4k_xWym19eAgc5HdXQ|hôm đó tôi có đi muộn không"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_11-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 182,
      "selected": false,
      "positionAbsolute": {
        "x": -469.67763211814963,
        "y": -391.8726387942104
      },
      "dragging": false
    },
    {
      "id": "stickyNoteAgentflow_12",
      "position": {
        "x": -745.7891248017575,
        "y": -401.38204289566625
      },
      "data": {
        "id": "stickyNoteAgentflow_12",
        "label": "Sticky Note (8) (9) (10) (11) (12)",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_12-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "29:1LZVQUxhyhMQA5VKBzO8OyD9wv6xrQaNNmO8nBd2BOEz4G2q6_jIBRlDoI-sLJt_uIyr-4k_xWym19eAgc5HdXQ|thứ 3 vừa qua tôi có đi muộn không"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_12-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 182,
      "selected": false,
      "positionAbsolute": {
        "x": -745.7891248017575,
        "y": -401.38204289566625
      },
      "dragging": false
    }
  ],
  "edges": [
    {
      "source": "conditionAgentAgentflow_0",
      "sourceHandle": "conditionAgentAgentflow_0-output-0",
      "target": "toolAgentflow_0",
      "targetHandle": "toolAgentflow_0",
      "data": {
        "sourceColor": "#ff8fab",
        "targetColor": "#d4a373",
        "edgeLabel": "0",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentAgentflow_0-conditionAgentAgentflow_0-output-0-toolAgentflow_0-toolAgentflow_0"
    },
    {
      "source": "conditionAgentAgentflow_0",
      "sourceHandle": "conditionAgentAgentflow_0-output-1",
      "target": "toolAgentflow_1",
      "targetHandle": "toolAgentflow_1",
      "data": {
        "sourceColor": "#ff8fab",
        "targetColor": "#d4a373",
        "edgeLabel": "1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentAgentflow_0-conditionAgentAgentflow_0-output-1-toolAgentflow_1-toolAgentflow_1"
    },
    {
      "source": "toolAgentflow_0",
      "sourceHandle": "toolAgentflow_0-output-toolAgentflow",
      "target": "customFunctionAgentflow_2",
      "targetHandle": "customFunctionAgentflow_2",
      "data": {
        "sourceColor": "#d4a373",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "toolAgentflow_0-toolAgentflow_0-output-toolAgentflow-customFunctionAgentflow_2-customFunctionAgentflow_2"
    },
    {
      "source": "toolAgentflow_1",
      "sourceHandle": "toolAgentflow_1-output-toolAgentflow",
      "target": "customFunctionAgentflow_3",
      "targetHandle": "customFunctionAgentflow_3",
      "data": {
        "sourceColor": "#d4a373",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "toolAgentflow_1-toolAgentflow_1-output-toolAgentflow-customFunctionAgentflow_3-customFunctionAgentflow_3"
    },
    {
      "source": "customFunctionAgentflow_2",
      "sourceHandle": "customFunctionAgentflow_2-output-customFunctionAgentflow",
      "target": "llmAgentflow_0",
      "targetHandle": "llmAgentflow_0",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#64B5F6",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_2-customFunctionAgentflow_2-output-customFunctionAgentflow-llmAgentflow_0-llmAgentflow_0"
    },
    {
      "source": "customFunctionAgentflow_3",
      "sourceHandle": "customFunctionAgentflow_3-output-customFunctionAgentflow",
      "target": "llmAgentflow_1",
      "targetHandle": "llmAgentflow_1",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#64B5F6",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_3-customFunctionAgentflow_3-output-customFunctionAgentflow-llmAgentflow_1-llmAgentflow_1"
    },
    {
      "source": "conditionAgentAgentflow_1",
      "sourceHandle": "conditionAgentAgentflow_1-output-0",
      "target": "conditionAgentAgentflow_0",
      "targetHandle": "conditionAgentAgentflow_0",
      "data": {
        "sourceColor": "#ff8fab",
        "targetColor": "#ff8fab",
        "edgeLabel": "0",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentAgentflow_1-conditionAgentAgentflow_1-output-0-conditionAgentAgentflow_0-conditionAgentAgentflow_0"
    },
    {
      "source": "conditionAgentAgentflow_1",
      "sourceHandle": "conditionAgentAgentflow_1-output-1",
      "target": "conditionAgentflow_0",
      "targetHandle": "conditionAgentflow_0",
      "data": {
        "sourceColor": "#ff8fab",
        "targetColor": "#FFB938",
        "edgeLabel": "1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentAgentflow_1-conditionAgentAgentflow_1-output-1-conditionAgentflow_0-conditionAgentflow_0"
    },
    {
      "source": "conditionAgentflow_0",
      "sourceHandle": "conditionAgentflow_0-output-0",
      "target": "customFunctionAgentflow_4",
      "targetHandle": "customFunctionAgentflow_4",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#E4B7FF",
        "edgeLabel": "0",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_0-conditionAgentflow_0-output-0-customFunctionAgentflow_4-customFunctionAgentflow_4"
    },
    {
      "source": "customFunctionAgentflow_1",
      "sourceHandle": "customFunctionAgentflow_1-output-customFunctionAgentflow",
      "target": "customFunctionAgentflow_6",
      "targetHandle": "customFunctionAgentflow_6",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_1-customFunctionAgentflow_1-output-customFunctionAgentflow-customFunctionAgentflow_6-customFunctionAgentflow_6"
    },
    {
      "source": "customFunctionAgentflow_6",
      "sourceHandle": "customFunctionAgentflow_6-output-customFunctionAgentflow",
      "target": "customFunctionAgentflow_5",
      "targetHandle": "customFunctionAgentflow_5",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_6-customFunctionAgentflow_6-output-customFunctionAgentflow-customFunctionAgentflow_5-customFunctionAgentflow_5"
    },
    {
      "source": "customFunctionAgentflow_5",
      "sourceHandle": "customFunctionAgentflow_5-output-customFunctionAgentflow",
      "target": "conditionAgentAgentflow_1",
      "targetHandle": "conditionAgentAgentflow_1",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#ff8fab",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_5-customFunctionAgentflow_5-output-customFunctionAgentflow-conditionAgentAgentflow_1-conditionAgentAgentflow_1"
    },
    {
      "source": "conditionAgentflow_0",
      "sourceHandle": "conditionAgentflow_0-output-1",
      "target": "customFunctionAgentflow_7",
      "targetHandle": "customFunctionAgentflow_7",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#E4B7FF",
        "edgeLabel": "1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_0-conditionAgentflow_0-output-1-customFunctionAgentflow_7-customFunctionAgentflow_7"
    },
    {
      "source": "llmAgentflow_0",
      "sourceHandle": "llmAgentflow_0-output-llmAgentflow",
      "target": "customFunctionAgentflow_12",
      "targetHandle": "customFunctionAgentflow_12",
      "data": {
        "sourceColor": "#64B5F6",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "llmAgentflow_0-llmAgentflow_0-output-llmAgentflow-customFunctionAgentflow_12-customFunctionAgentflow_12"
    },
    {
      "source": "startAgentflow_0",
      "sourceHandle": "startAgentflow_0-output-startAgentflow",
      "target": "customFunctionAgentflow_8",
      "targetHandle": "customFunctionAgentflow_8",
      "data": {
        "sourceColor": "#7EE787",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "startAgentflow_0-startAgentflow_0-output-startAgentflow-customFunctionAgentflow_8-customFunctionAgentflow_8"
    },
    {
      "source": "customFunctionAgentflow_8",
      "sourceHandle": "customFunctionAgentflow_8-output-customFunctionAgentflow",
      "target": "customFunctionAgentflow_1",
      "targetHandle": "customFunctionAgentflow_1",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_8-customFunctionAgentflow_8-output-customFunctionAgentflow-customFunctionAgentflow_1-customFunctionAgentflow_1"
    },
    {
      "source": "llmAgentflow_1",
      "sourceHandle": "llmAgentflow_1-output-llmAgentflow",
      "target": "customFunctionAgentflow_13",
      "targetHandle": "customFunctionAgentflow_13",
      "data": {
        "sourceColor": "#64B5F6",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "llmAgentflow_1-llmAgentflow_1-output-llmAgentflow-customFunctionAgentflow_13-customFunctionAgentflow_13"
    }
  ]
}