{
  "nodes": [
    {
      "id": "startAgentflow_0",
      "type": "agentFlow",
      "position": {
        "x": -4833.104275281055,
        "y": -49.05598443435912
      },
      "data": {
        "id": "startAgentflow_0",
        "label": "Start",
        "version": 1.1,
        "name": "startAgentflow",
        "type": "Start",
        "color": "#7EE787",
        "hideInput": true,
        "baseClasses": [
          "Start"
        ],
        "category": "Agent Flows",
        "description": "Starting point of the agentflow",
        "inputParams": [
          {
            "label": "Input Type",
            "name": "startInputType",
            "type": "options",
            "options": [
              {
                "label": "Chat Input",
                "name": "chatInput",
                "description": "Start the conversation with chat input"
              },
              {
                "label": "Form Input",
                "name": "formInput",
                "description": "Start the workflow with form inputs"
              }
            ],
            "default": "chatInput",
            "id": "startAgentflow_0-input-startInputType-options",
            "display": true
          },
          {
            "label": "Form Title",
            "name": "formTitle",
            "type": "string",
            "placeholder": "Please Fill Out The Form",
            "show": {
              "startInputType": "formInput"
            },
            "id": "startAgentflow_0-input-formTitle-string",
            "display": false
          },
          {
            "label": "Form Description",
            "name": "formDescription",
            "type": "string",
            "placeholder": "Complete all fields below to continue",
            "show": {
              "startInputType": "formInput"
            },
            "id": "startAgentflow_0-input-formDescription-string",
            "display": false
          },
          {
            "label": "Form Input Types",
            "name": "formInputTypes",
            "description": "Specify the type of form input",
            "type": "array",
            "show": {
              "startInputType": "formInput"
            },
            "array": [
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  },
                  {
                    "label": "Options",
                    "name": "options"
                  }
                ],
                "default": "string"
              },
              {
                "label": "Label",
                "name": "label",
                "type": "string",
                "placeholder": "Label for the input"
              },
              {
                "label": "Variable Name",
                "name": "name",
                "type": "string",
                "placeholder": "Variable name for the input (must be camel case)",
                "description": "Variable name must be camel case. For example: firstName, lastName, etc."
              },
              {
                "label": "Add Options",
                "name": "addOptions",
                "type": "array",
                "show": {
                  "formInputTypes[$index].type": "options"
                },
                "array": [
                  {
                    "label": "Option",
                    "name": "option",
                    "type": "string"
                  }
                ]
              }
            ],
            "id": "startAgentflow_0-input-formInputTypes-array",
            "display": false
          },
          {
            "label": "Ephemeral Memory",
            "name": "startEphemeralMemory",
            "type": "boolean",
            "description": "Start fresh for every execution without past chat history",
            "optional": true,
            "id": "startAgentflow_0-input-startEphemeralMemory-boolean",
            "display": true
          },
          {
            "label": "Flow State",
            "name": "startState",
            "description": "Runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string",
                "placeholder": "Foo"
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "placeholder": "Bar",
                "optional": true
              }
            ],
            "id": "startAgentflow_0-input-startState-array",
            "display": true
          },
          {
            "label": "Persist State",
            "name": "startPersistState",
            "type": "boolean",
            "description": "Persist the state in the same session",
            "optional": true,
            "id": "startAgentflow_0-input-startPersistState-boolean",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "startInputType": "chatInput",
          "startEphemeralMemory": "",
          "startState": [
            {
              "key": "api_url",
              "value": "http://localhost:8000"
            },
            {
              "key": "assistant_role",
              "value": "Assistant named Minh Hiển, specialized virtual assistant for comprehensive attendance and time management support. Assistant must always communicate in the User's preferred language and adapt to their communication style"
            },
            {
              "key": "assistant_skill",
              "value": "Assistant is a knowledgeable specialist in attendance management systems, offering expert guidance on time tracking, work schedule optimization, and attendance policy compliance. Assistant excels at analyzing user attendance patterns, identifying potential issues, and providing actionable insights for improved time management. Assistant demonstrates proficiency in handling complex attendance calculations, comparative analysis, and generating meaningful reports. Assistant always responds in the language used by the User, adapting tone and complexity to match user preferences"
            },
            {
              "key": "assistant_scope",
              "value": "Monitor and report real-time attendance status including check-in/check-out verification \\n- Analyze historical attendance data, calculate work hours, overtime, and attendance statistics \\n- Generate personalized attendance insights and recommendations"
            },
            {
              "key": "assistant_tone",
              "value": "- Humor and sarcasm can be tricky in text. Let's keep the conversation straightforward and avoid misunderstandings\\n- Even in casual conversations, Assistant must maintain a level of professionalism. Let's keep the interaction respectful and professional."
            },
            {
              "key": "vn_pronoun",
              "value": "Trong tiếng việt, Assistant luôn là \\\"Em\\\" và Assistant PHẢI tự xưng là \\\"Em\\\" trong tất cả các trường hợp. \\nAssistant gọi User theo danh xưng lịch sự là \\\"anh\\\" nếu giới tính là NAM hoặc \\\"chị\\\" nếu giới tính là NỮ và nếu chưa xác định được giới tính thì gọi User là \\\"anh/chị\\\". \\n\\nXem các ví dụ bên dưới để hiểu rõ cách dùng\\nUser: Xin chào\\nReasoning: User nói xin chào nhưng không xác định được giới tính nên Assistant sẽ gọi User là \\\"anh/chị\\\", Assistant sẽ là \\\"em\\\" \\nAssistant: Dạ, em có thể giúp gì cho anh/chị?\\n\\nUser: Chào em, anh là Tùng, cho anh hỏi một chút.\\nReasoning: User xưng \\\"anh\\\" và giới thiệu tên là \\\"Tùng\\\" nên xác định được giới tính là Nam nên sẽ gọi User bằng danh xưng và tên là \\\"Anh Tùng\\\". Assistant sẽ là \\\"Em\\\"\\nAssistant: Chào anh Tùng, em có thể giúp gì cho anh."
            },
            {
              "key": "company_contact",
              "value": "Hotline: 0899507188"
            },
            {
              "key": "counter_query",
              "value": "0"
            },
            {
              "key": "start_date",
              "value": ""
            },
            {
              "key": "end_date",
              "value": ""
            },
            {
              "key": "user_id",
              "value": ""
            },
            {
              "key": "user_name",
              "value": ""
            },
            {
              "key": "user_email",
              "value": ""
            },
            {
              "key": "user_question",
              "value": ""
            },
            {
              "key": "topic",
              "value": ""
            }
          ],
          "startPersistState": false
        },
        "outputAnchors": [
          {
            "id": "startAgentflow_0-output-startAgentflow",
            "label": "Start",
            "name": "startAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 103,
      "height": 65,
      "positionAbsolute": {
        "x": -4833.104275281055,
        "y": -49.05598443435912
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "conditionAgentAgentflow_0",
      "position": {
        "x": -3671.450172338478,
        "y": 8.190010886776179
      },
      "data": {
        "id": "conditionAgentAgentflow_0",
        "label": "Router",
        "version": 1.1,
        "name": "conditionAgentAgentflow",
        "type": "ConditionAgent",
        "color": "#ff8fab",
        "baseClasses": [
          "ConditionAgent"
        ],
        "category": "Agent Flows",
        "description": "Utilize an agent to split flows based on dynamic conditions",
        "inputParams": [
          {
            "label": "Model",
            "name": "conditionAgentModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "conditionAgentAgentflow_0-input-conditionAgentModel-asyncOptions",
            "display": true
          },
          {
            "label": "Instructions",
            "name": "conditionAgentInstructions",
            "type": "string",
            "description": "A general instructions of what the condition agent should do",
            "rows": 4,
            "acceptVariable": true,
            "placeholder": "Determine if the user is interested in learning about AI",
            "id": "conditionAgentAgentflow_0-input-conditionAgentInstructions-string",
            "display": true
          },
          {
            "label": "Input",
            "name": "conditionAgentInput",
            "type": "string",
            "description": "Input to be used for the condition agent",
            "rows": 4,
            "acceptVariable": true,
            "default": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span> </p>",
            "id": "conditionAgentAgentflow_0-input-conditionAgentInput-string",
            "display": true
          },
          {
            "label": "Scenarios",
            "name": "conditionAgentScenarios",
            "description": "Define the scenarios that will be used as the conditions to split the flow",
            "type": "array",
            "array": [
              {
                "label": "Scenario",
                "name": "scenario",
                "type": "string",
                "placeholder": "User is asking for a pizza"
              }
            ],
            "default": [
              {
                "scenario": ""
              },
              {
                "scenario": ""
              }
            ],
            "id": "conditionAgentAgentflow_0-input-conditionAgentScenarios-array",
            "display": true
          },
          {
            "label": "Override System Prompt",
            "name": "conditionAgentOverrideSystemPrompt",
            "type": "boolean",
            "description": "Override initial system prompt for Condition Agent",
            "optional": true,
            "id": "conditionAgentAgentflow_0-input-conditionAgentOverrideSystemPrompt-boolean",
            "display": true
          },
          {
            "label": "Node System Prompt",
            "name": "conditionAgentSystemPrompt",
            "type": "string",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "default": "<p>You are part of a multi-agent system designed to make agent coordination and execution easy. Your task is to analyze the given input and select one matching scenario from a provided set of scenarios.</p>\n    <ul>\n        <li><strong>Input</strong>: A string representing the user's query, message or data.</li>\n        <li><strong>Scenarios</strong>: A list of predefined scenarios that relate to the input.</li>\n        <li><strong>Instruction</strong>: Determine which of the provided scenarios is the best fit for the input.</li>\n    </ul>\n    <h2>Steps</h2>\n    <ol>\n        <li><strong>Read the input string</strong> and the list of scenarios.</li>\n        <li><strong>Analyze the content of the input</strong> to identify its main topic or intention.</li>\n        <li><strong>Compare the input with each scenario</strong>: Evaluate how well the input's topic or intention aligns with each of the provided scenarios and select the one that is the best fit.</li>\n        <li><strong>Output the result</strong>: Return the selected scenario in the specified JSON format.</li>\n    </ol>\n    <h2>Output Format</h2>\n    <p>Output should be a JSON object that names the selected scenario, like this: <code>{\"output\": \"<selected_scenario_name>\"}</code>. No explanation is needed.</p>\n    <h2>Examples</h2>\n    <ol>\n       <li>\n            <p><strong>Input</strong>: <code>{\"input\": \"Hello\", \"scenarios\": [\"user is asking about AI\", \"user is not asking about AI\"], \"instruction\": \"Your task is to check if the user is asking about AI.\"}</code></p>\n            <p><strong>Output</strong>: <code>{\"output\": \"user is not asking about AI\"}</code></p>\n        </li>\n        <li>\n            <p><strong>Input</strong>: <code>{\"input\": \"What is AIGC?\", \"scenarios\": [\"user is asking about AI\", \"user is asking about the weather\"], \"instruction\": \"Your task is to check and see if the user is asking a topic about AI.\"}</code></p>\n            <p><strong>Output</strong>: <code>{\"output\": \"user is asking about AI\"}</code></p>\n        </li>\n        <li>\n            <p><strong>Input</strong>: <code>{\"input\": \"Can you explain deep learning?\", \"scenarios\": [\"user is interested in AI topics\", \"user wants to order food\"], \"instruction\": \"Determine if the user is interested in learning about AI.\"}</code></p>\n            <p><strong>Output</strong>: <code>{\"output\": \"user is interested in AI topics\"}</code></p>\n        </li>\n    </ol>\n    <h2>Note</h2>\n    <ul>\n        <li>Ensure that the input scenarios align well with potential user queries for accurate matching.</li>\n        <li>DO NOT include anything other than the JSON in your response.</li>\n    </ul>",
            "description": "Expert use only. Modifying this can significantly alter agent behavior. Leave default if unsure",
            "show": {
              "conditionAgentOverrideSystemPrompt": true
            },
            "id": "conditionAgentAgentflow_0-input-conditionAgentSystemPrompt-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "conditionAgentModel": "chatGoogleGenerativeAI",
          "conditionAgentInstructions": "<p>Phân tích câu hỏi của người dùng và xác định họ đang muốn hỏi về chủ đề gì để đưa ra phản hồi phù hợp.</p><p>Quy tắc xác định:</p><ul><li><p>Nếu người dùng đang chào hỏi, ví dụ: hello, hi, chào, xin chào, em ơi, có ai không, chào em, v. v. thì xác định <strong>greeting</strong></p></li><li><p>Nếu người dùng nói nhảm, tán tỉnh, yêu cầu viết thơ, viết code, kể chuyện hài, hoặc nói về các chủ đề không liên quan đến chấm công (attendance) thì xác định <strong>off_topic</strong></p></li><li><p>Nếu người dùng hỏi về việc chấm công ví dụ: </p><ul><li><p>Hôm nay tôi đã check-in chưa? </p></li><li><p>Tuần này tôi làm được bao nhiêu giờ? </p></li><li><p>Tôi thường check-in lúc nào? </p></li><li><p>Tôi đã làm đủ giờ chưa?</p></li></ul></li></ul><p>hoặc có các từ khóa như check in, check out, đi muộn, số ngày công, v.v. thì xác định <strong>attendance</strong></p><ul><li><p>Ngoài ra, nếu người dùng <strong>không nhắc trực tiếp đến các từ khóa attendance</strong> nhưng lại đề cập đến <strong>mốc thời gian cụ thể hoặc tương đối</strong> như: <strong>hôm trước, hôm nay, hôm qua, tuần này, thứ 4 vừa rồi, thứ 6 tuần trước, tháng trước, v.v.</strong></p></li></ul><p>thì cũng xác định <strong>attendance</strong>, vì có khả năng người dùng đang tiếp tục trao đổi về chủ đề chấm công đã được nhắc đến trước đó.</p>",
          "conditionAgentInput": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.user_question\" data-label=\"$flow.state.user_question\">{{ $flow.state.user_question }}</span> </p>",
          "conditionAgentScenarios": [
            {
              "scenario": "greeting"
            },
            {
              "scenario": "off topic"
            },
            {
              "scenario": "attendance"
            }
          ],
          "conditionAgentOverrideSystemPrompt": true,
          "conditionAgentModelConfig": {
            "cache": "",
            "modelName": "gemini-2.0-flash",
            "customModelName": "",
            "temperature": 0.9,
            "streaming": true,
            "maxOutputTokens": "",
            "topP": "",
            "topK": "",
            "safetySettings": "",
            "baseUrl": "",
            "allowImageUploads": "",
            "conditionAgentModel": "chatGoogleGenerativeAI"
          },
          "undefined": "",
          "conditionAgentSystemPrompt": "<p>You are part of a multi-agent system designed to make agent coordination and execution easy. Your task is to analyze the given input and select one matching scenario from a provided set of scenarios.</p><ul><li><p><strong>Input</strong>: A string representing the user's query, message or data.</p></li><li><p><strong>Scenarios</strong>: A list of predefined scenarios that relate to the input.</p></li><li><p><strong>Instruction</strong>: Determine which of the provided scenarios is the best fit for the input.</p></li></ul><h2>Steps</h2><ol><li><p><strong>Read the input string</strong> and the list of scenarios.</p></li><li><p><strong>Analyze the content of the input</strong> to identify its main topic or intention.</p></li><li><p><strong>Compare the input with each scenario</strong>: Evaluate how well the input's topic or intention aligns with each of the provided scenarios and select the one that is the best fit.</p></li><li><p><strong>Output the result</strong>: Return the selected scenario in the specified JSON format.</p></li></ol><h2>Output Format</h2><p>Output should be a JSON object that names the selected scenario, like this: <code>{\"output\": \"\"}</code>. No explanation is needed.</p><h2>Examples</h2><ol><li><p><strong>Input</strong>: <code>{\"input\": \"Hello\", \"scenarios\": [\"user is asking about AI\", \"user is not asking about AI\"], \"instruction\": \"Your task is to check if the user is asking about AI.\"}</code></p><p><strong>Output</strong>: <code>{\"output\": \"user is not asking about AI\"}</code></p></li><li><p><strong>Input</strong>: <code>{\"input\": \"What is AIGC?\", \"scenarios\": [\"user is asking about AI\", \"user is asking about the weather\"], \"instruction\": \"Your task is to check and see if the user is asking a topic about AI.\"}</code></p><p><strong>Output</strong>: <code>{\"output\": \"user is asking about AI\"}</code></p></li><li><p><strong>Input</strong>: <code>{\"input\": \"Can you explain deep learning?\", \"scenarios\": [\"user is interested in AI topics\", \"user wants to order food\"], \"instruction\": \"Determine if the user is interested in learning about AI.\"}</code></p><p><strong>Output</strong>: <code>{\"output\": \"user is interested in AI topics\"}</code></p></li></ol><h2>Note</h2><ul><li><p>Ensure that the input scenarios align well with potential user queries for accurate matching.</p></li><li><p>DO NOT include anything other than the JSON in your response.</p></li></ul>"
        },
        "outputAnchors": [
          {
            "id": "conditionAgentAgentflow_0-output-0",
            "label": 0,
            "name": 0,
            "description": "Condition 0"
          },
          {
            "id": "conditionAgentAgentflow_0-output-1",
            "label": 1,
            "name": 1,
            "description": "Condition 1"
          },
          {
            "id": "conditionAgentAgentflow_0-output-2",
            "label": 2,
            "name": 2,
            "description": "Condition 2"
          }
        ],
        "outputs": {
          "conditionAgentAgentflow": ""
        },
        "selected": false
      },
      "type": "agentFlow",
      "width": 199,
      "height": 100,
      "selected": false,
      "positionAbsolute": {
        "x": -3671.450172338478,
        "y": 8.190010886776179
      },
      "dragging": false
    },
    {
      "id": "directReplyAgentflow_0",
      "position": {
        "x": -3409.258207218956,
        "y": 52.3186805079354
      },
      "data": {
        "id": "directReplyAgentflow_0",
        "label": "Off topic",
        "version": 1,
        "name": "directReplyAgentflow",
        "type": "DirectReply",
        "color": "#4DDBBB",
        "hideOutput": true,
        "baseClasses": [
          "DirectReply"
        ],
        "category": "Agent Flows",
        "description": "Directly reply to the user with a message",
        "inputParams": [
          {
            "label": "Message",
            "name": "directReplyMessage",
            "type": "string",
            "rows": 4,
            "acceptVariable": true,
            "id": "directReplyAgentflow_0-input-directReplyMessage-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "directReplyMessage": "<p>Xin lỗi, em không thể trả lời câu hỏi hiện tại của anh/chị.</p>"
        },
        "outputAnchors": [],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 128,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": -3409.258207218956,
        "y": 52.3186805079354
      },
      "dragging": false
    },
    {
      "id": "llmAgentflow_0",
      "position": {
        "x": -3416.787906701905,
        "y": -42.66783636269173
      },
      "data": {
        "id": "llmAgentflow_0",
        "label": "Greeting",
        "version": 1,
        "name": "llmAgentflow",
        "type": "LLM",
        "color": "#64B5F6",
        "baseClasses": [
          "LLM"
        ],
        "category": "Agent Flows",
        "description": "Large language models to analyze user-provided inputs and generate responses",
        "inputParams": [
          {
            "label": "Model",
            "name": "llmModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "llmAgentflow_0-input-llmModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "llmMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "llmAgentflow_0-input-llmMessages-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "llmEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "llmAgentflow_0-input-llmEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "llmMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "llmEnableMemory": true
            },
            "id": "llmAgentflow_0-input-llmMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "llmMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "llmMemoryType": "windowSize"
            },
            "id": "llmAgentflow_0-input-llmMemoryWindowSize-number",
            "display": false
          },
          {
            "label": "Max Token Limit",
            "name": "llmMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "llmMemoryType": "conversationSummaryBuffer"
            },
            "id": "llmAgentflow_0-input-llmMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "llmUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "llmEnableMemory": true
            },
            "id": "llmAgentflow_0-input-llmUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "llmReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "llmAgentflow_0-input-llmReturnResponseAs-options",
            "display": true
          },
          {
            "label": "JSON Structured Output",
            "name": "llmStructuredOutput",
            "description": "Instruct the LLM to give output in a JSON structured schema",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string"
              },
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "String Array",
                    "name": "stringArray"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  },
                  {
                    "label": "Enum",
                    "name": "enum"
                  },
                  {
                    "label": "JSON Array",
                    "name": "jsonArray"
                  }
                ]
              },
              {
                "label": "Enum Values",
                "name": "enumValues",
                "type": "string",
                "placeholder": "value1, value2, value3",
                "description": "Enum values. Separated by comma",
                "optional": true,
                "show": {
                  "llmStructuredOutput[$index].type": "enum"
                }
              },
              {
                "label": "JSON Schema",
                "name": "jsonSchema",
                "type": "code",
                "placeholder": "{\n    \"answer\": {\n        \"type\": \"string\",\n        \"description\": \"Value of the answer\"\n    },\n    \"reason\": {\n        \"type\": \"string\",\n        \"description\": \"Reason for the answer\"\n    },\n    \"optional\": {\n        \"type\": \"boolean\"\n    },\n    \"count\": {\n        \"type\": \"number\"\n    },\n    \"children\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"string\",\n                    \"description\": \"Value of the children's answer\"\n                }\n            }\n        }\n    }\n}",
                "description": "JSON schema for the structured output",
                "optional": true,
                "hideCodeExecute": true,
                "show": {
                  "llmStructuredOutput[$index].type": "jsonArray"
                }
              },
              {
                "label": "Description",
                "name": "description",
                "type": "string",
                "placeholder": "Description of the key"
              }
            ],
            "id": "llmAgentflow_0-input-llmStructuredOutput-array",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "llmUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "llmAgentflow_0-input-llmUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "llmModel": "chatGoogleGenerativeAI",
          "llmMessages": [
            {
              "role": "system",
              "content": "<h1>Role</h1><p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.assistant_role\" data-label=\"$flow.state.assistant_role\">{{ $flow.state.assistant_role }}</span></p><p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.assistant_skill\" data-label=\"$flow.state.assistant_skill\">{{ $flow.state.assistant_skill }}</span></p><h1>Tone</h1><p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.assistant_tone\" data-label=\"$flow.state.assistant_tone\">{{ $flow.state.assistant_tone }}</span></p><h1>Cách xưng hô trong tiếng Việt</h1><p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.vn_pronoun\" data-label=\"$flow.state.vn_pronoun\">{{ $flow.state.vn_pronoun }}</span></p><h1>Task</h1><ul><li><p>User will greet or say \"start\" to start a conversation. Assistant, please kindly and politely greet the User back and always introduce that Assistant can <span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.assistant_role\" data-label=\"$flow.state.assistant_role\">{{ $flow.state.assistant_role }}</span> and <span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.assistant_scope\" data-label=\"$flow.state.assistant_scope\">{{ $flow.state.assistant_scope }}</span></p></li><li><p>Assistant can greet and ingeniously and flexibly provide information solutions to User.</p></li><li><p>When Assistant doesn't know User's name, Assistant must tactfully ask for the User's name to provide better support.</p></li><li><p>Assistant always ask User if User need Assistant support in recommending suitable products</p></li></ul><h1>Constraint</h1><ul><li><p>Do not use icons or emojis in the Assistant's responses.</p></li><li><p>Must Capitalize The First Letter Of The User's Name</p></li><li><p>Response in bullet-point format.</p></li><li><p>Assistant must response full the answer with full information. Must not response with \"...\"</p></li><li><p>IN ALL CIRCUMSTANCES, when user questions or makes requests that are not in the context, Assistant is not allowed to answer and must ask User to contact <span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.company_contact\" data-label=\"$flow.state.company_contact\">{{ $flow.state.company_contact }}</span></p></li><li><p>Assistant always responds in the language used by the user. Identify the language of the User's input and reply in the same language</p></li></ul><h1>Example</h1><p><strong>Chào anh/chị, em là Minh Hiển — trợ lý ảo hỗ trợ quản lý chấm công cho công ty.</strong><br>Em có thể giúp anh/chị tra cứu thông tin chấm công, kiểm tra thời gian làm việc, ca làm, cũng như trạng thái check-in/check-out. Ngoài ra, em còn hỗ trợ xem lịch sử chấm công và xử lý các thắc mắc liên quan đến ca làm việc.<br>Anh/chị cần em hỗ trợ gì hôm nay ạ?</p><h1>Note</h1><p>Khi User hỏi về các chức năng hoặc yêu cầu giới thiệu các tính năng của chatbot, hãy trả lời:</p><p>Vâng, em có thể hỗ trợ anh/chị các chức năng chấm công sau:</p><ul><li><p>Kiểm tra trạng thái: Xem tình trạng check-in/check-out hiện tại, kiểm tra đã chấm công đầy đủ chưa</p></li><li><p>Thông tin thời gian: Tra cứu giờ vào/ra, lịch sử chấm công theo ngày/tuần/tháng, tổng số giờ làm việc</p></li><li><p>Tính toán phân tích: Tính số giờ còn thiếu, so sánh với kỳ trước, phân tích xu hướng làm việc</p></li><li><p>Thống kê cá nhân: Thời gian check-in trung bình, thói quen làm việc, báo cáo chi tiết</p></li></ul><p>Anh/chị muốn em hỗ trợ loại thông tin nào? Em có thể tư vấn chi tiết hơn ạ.</p>"
            }
          ],
          "llmEnableMemory": true,
          "llmMemoryType": "allMessages",
          "llmUserMessage": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span> </p>",
          "llmReturnResponseAs": "userMessage",
          "llmStructuredOutput": "",
          "llmUpdateState": [],
          "llmModelConfig": {
            "cache": "",
            "modelName": "gemini-2.5-flash-preview-05-20",
            "customModelName": "",
            "temperature": 0.9,
            "streaming": true,
            "maxOutputTokens": "",
            "topP": "",
            "topK": "",
            "safetySettings": "",
            "baseUrl": "",
            "allowImageUploads": "",
            "llmModel": "chatGoogleGenerativeAI"
          }
        },
        "outputAnchors": [
          {
            "id": "llmAgentflow_0-output-llmAgentflow",
            "label": "LLM",
            "name": "llmAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 283,
      "height": 72,
      "selected": false,
      "positionAbsolute": {
        "x": -3416.787906701905,
        "y": -42.66783636269173
      },
      "dragging": false
    },
    {
      "id": "conditionAgentAgentflow_1",
      "position": {
        "x": -3413.347201339111,
        "y": 155.14938166437105
      },
      "data": {
        "id": "conditionAgentAgentflow_1",
        "label": "Is self inquiry?",
        "version": 1.1,
        "name": "conditionAgentAgentflow",
        "type": "ConditionAgent",
        "color": "#ff8fab",
        "baseClasses": [
          "ConditionAgent"
        ],
        "category": "Agent Flows",
        "description": "Utilize an agent to split flows based on dynamic conditions",
        "inputParams": [
          {
            "label": "Model",
            "name": "conditionAgentModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "conditionAgentAgentflow_1-input-conditionAgentModel-asyncOptions",
            "display": true
          },
          {
            "label": "Instructions",
            "name": "conditionAgentInstructions",
            "type": "string",
            "description": "A general instructions of what the condition agent should do",
            "rows": 4,
            "acceptVariable": true,
            "placeholder": "Determine if the user is interested in learning about AI",
            "id": "conditionAgentAgentflow_1-input-conditionAgentInstructions-string",
            "display": true
          },
          {
            "label": "Input",
            "name": "conditionAgentInput",
            "type": "string",
            "description": "Input to be used for the condition agent",
            "rows": 4,
            "acceptVariable": true,
            "default": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span> </p>",
            "id": "conditionAgentAgentflow_1-input-conditionAgentInput-string",
            "display": true
          },
          {
            "label": "Scenarios",
            "name": "conditionAgentScenarios",
            "description": "Define the scenarios that will be used as the conditions to split the flow",
            "type": "array",
            "array": [
              {
                "label": "Scenario",
                "name": "scenario",
                "type": "string",
                "placeholder": "User is asking for a pizza"
              }
            ],
            "default": [
              {
                "scenario": ""
              },
              {
                "scenario": ""
              }
            ],
            "id": "conditionAgentAgentflow_1-input-conditionAgentScenarios-array",
            "display": true
          },
          {
            "label": "Override System Prompt",
            "name": "conditionAgentOverrideSystemPrompt",
            "type": "boolean",
            "description": "Override initial system prompt for Condition Agent",
            "optional": true,
            "id": "conditionAgentAgentflow_1-input-conditionAgentOverrideSystemPrompt-boolean",
            "display": true
          },
          {
            "label": "Node System Prompt",
            "name": "conditionAgentSystemPrompt",
            "type": "string",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "default": "<p>You are part of a multi-agent system designed to make agent coordination and execution easy. Your task is to analyze the given input and select one matching scenario from a provided set of scenarios.</p>\n    <ul>\n        <li><strong>Input</strong>: A string representing the user's query, message or data.</li>\n        <li><strong>Scenarios</strong>: A list of predefined scenarios that relate to the input.</li>\n        <li><strong>Instruction</strong>: Determine which of the provided scenarios is the best fit for the input.</li>\n    </ul>\n    <h2>Steps</h2>\n    <ol>\n        <li><strong>Read the input string</strong> and the list of scenarios.</li>\n        <li><strong>Analyze the content of the input</strong> to identify its main topic or intention.</li>\n        <li><strong>Compare the input with each scenario</strong>: Evaluate how well the input's topic or intention aligns with each of the provided scenarios and select the one that is the best fit.</li>\n        <li><strong>Output the result</strong>: Return the selected scenario in the specified JSON format.</li>\n    </ol>\n    <h2>Output Format</h2>\n    <p>Output should be a JSON object that names the selected scenario, like this: <code>{\"output\": \"<selected_scenario_name>\"}</code>. No explanation is needed.</p>\n    <h2>Examples</h2>\n    <ol>\n       <li>\n            <p><strong>Input</strong>: <code>{\"input\": \"Hello\", \"scenarios\": [\"user is asking about AI\", \"user is not asking about AI\"], \"instruction\": \"Your task is to check if the user is asking about AI.\"}</code></p>\n            <p><strong>Output</strong>: <code>{\"output\": \"user is not asking about AI\"}</code></p>\n        </li>\n        <li>\n            <p><strong>Input</strong>: <code>{\"input\": \"What is AIGC?\", \"scenarios\": [\"user is asking about AI\", \"user is asking about the weather\"], \"instruction\": \"Your task is to check and see if the user is asking a topic about AI.\"}</code></p>\n            <p><strong>Output</strong>: <code>{\"output\": \"user is asking about AI\"}</code></p>\n        </li>\n        <li>\n            <p><strong>Input</strong>: <code>{\"input\": \"Can you explain deep learning?\", \"scenarios\": [\"user is interested in AI topics\", \"user wants to order food\"], \"instruction\": \"Determine if the user is interested in learning about AI.\"}</code></p>\n            <p><strong>Output</strong>: <code>{\"output\": \"user is interested in AI topics\"}</code></p>\n        </li>\n    </ol>\n    <h2>Note</h2>\n    <ul>\n        <li>Ensure that the input scenarios align well with potential user queries for accurate matching.</li>\n        <li>DO NOT include anything other than the JSON in your response.</li>\n    </ul>",
            "description": "Expert use only. Modifying this can significantly alter agent behavior. Leave default if unsure",
            "show": {
              "conditionAgentOverrideSystemPrompt": true
            },
            "id": "conditionAgentAgentflow_1-input-conditionAgentSystemPrompt-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "conditionAgentModel": "chatGoogleGenerativeAI",
          "conditionAgentInstructions": "<p>Hãy xác định xem câu hỏi của người dùng có đề cập đến thông tin về thời gian hay không.</p><p>Quy tắc xác định:</p><ul><li><p><strong>Nếu người dùng có đề cập đến thông tin thời gian </strong>bao gồm ngày, tháng, năm, tuần, hoặc các từ khóa chỉ mốc thời gian cụ thể hoặc tương đối như:</p><ul><li><p>“hôm nay”, “ngày mai”, “hôm qua”</p></li><li><p>“tuần này”, “tháng trước”, “quý này”</p></li><li><p>“ngày 1/8”, “tháng 7”, “năm 2025”</p></li><li><p>“lúc 8 giờ”, “9h sáng”, “chiều nay”</p></li><li><p>“trong 3 ngày gần đây”, “7 ngày qua”, “cuối tuần”</p></li></ul></li></ul><p>thì xác định <strong>Có đề cập đến thời gian</strong></p><ul><li><p><strong>Nếu người dùng không đề cập đến bất kỳ thời gian nào, </strong>câu hỏi không có thông tin thời gian, không thể xác định được mốc thời gian liên quan, ví dụ:</p><ul><li><p>“Tôi đã check-in chưa?”</p></li><li><p>“Tôi check-out mấy giờ?”</p></li><li><p>“Giờ vào là lúc nào?”</p></li><li><p>\"Tôi đi muộn không?\"</p></li></ul></li></ul><p>hoặc không chứa các từ khóa thời gian như “hôm nay”, “ngày”, “tháng”, “tuần”, v.v. thì xác định <strong>Không đề cập đến thời gian</strong></p>",
          "conditionAgentInput": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.user_question\" data-label=\"$flow.state.user_question\">{{ $flow.state.user_question }}</span> </p>",
          "conditionAgentScenarios": [
            {
              "scenario": "Người dùng hỏi về người khác"
            },
            {
              "scenario": "Không đề cập đến thời gian"
            }
          ],
          "conditionAgentOverrideSystemPrompt": true,
          "conditionAgentModelConfig": {
            "cache": "",
            "modelName": "gemini-2.0-flash",
            "customModelName": "",
            "temperature": 0.9,
            "streaming": true,
            "maxOutputTokens": "",
            "topP": "",
            "topK": "",
            "safetySettings": "",
            "baseUrl": "",
            "allowImageUploads": "",
            "conditionAgentModel": "chatGoogleGenerativeAI"
          },
          "undefined": "",
          "conditionAgentSystemPrompt": "<p>You are part of a multi-agent system designed to make agent coordination and execution easy. Your task is to analyze the given input and select one matching scenario from a provided set of scenarios.</p><ul><li><p><strong>Input</strong>: A string representing the user's query, message or data.</p></li><li><p><strong>Scenarios</strong>: A list of predefined scenarios that relate to the input.</p></li><li><p><strong>Instruction</strong>: Determine which of the provided scenarios is the best fit for the input.</p></li></ul><h2>Steps</h2><ol><li><p><strong>Read the input string</strong> and the list of scenarios.</p></li><li><p><strong>Analyze the content of the input</strong> to identify its main topic or intention.</p></li><li><p><strong>Compare the input with each scenario</strong>: Evaluate how well the input's topic or intention aligns with each of the provided scenarios and select the one that is the best fit.</p></li><li><p><strong>Output the result</strong>: Return the selected scenario in the specified JSON format.</p></li></ol><h2>Output Format</h2><p>Output should be a JSON object that names the selected scenario, like this: <code>{\"output\": \"\"}</code>. No explanation is needed.</p><h2>Examples</h2><ol><li><p><strong>Input</strong>: <code>{\"input\": \"Hello\", \"scenarios\": [\"user is asking about AI\", \"user is not asking about AI\"], \"instruction\": \"Your task is to check if the user is asking about AI.\"}</code></p><p><strong>Output</strong>: <code>{\"output\": \"user is not asking about AI\"}</code></p></li><li><p><strong>Input</strong>: <code>{\"input\": \"What is AIGC?\", \"scenarios\": [\"user is asking about AI\", \"user is asking about the weather\"], \"instruction\": \"Your task is to check and see if the user is asking a topic about AI.\"}</code></p><p><strong>Output</strong>: <code>{\"output\": \"user is asking about AI\"}</code></p></li><li><p><strong>Input</strong>: <code>{\"input\": \"Can you explain deep learning?\", \"scenarios\": [\"user is interested in AI topics\", \"user wants to order food\"], \"instruction\": \"Determine if the user is interested in learning about AI.\"}</code></p><p><strong>Output</strong>: <code>{\"output\": \"user is interested in AI topics\"}</code></p></li></ol><h2>Note</h2><ul><li><p>Ensure that the input scenarios align well with potential user queries for accurate matching.</p></li><li><p>DO NOT include anything other than the JSON in your response.</p></li></ul>"
        },
        "outputAnchors": [
          {
            "id": "conditionAgentAgentflow_1-output-0",
            "label": "Condition Agent",
            "name": "conditionAgentAgentflow"
          },
          {
            "id": "conditionAgentAgentflow_1-output-1",
            "label": "Condition Agent",
            "name": "conditionAgentAgentflow"
          }
        ],
        "outputs": {
          "conditionAgentAgentflow": ""
        },
        "selected": false
      },
      "type": "agentFlow",
      "width": 199,
      "height": 80,
      "selected": false,
      "positionAbsolute": {
        "x": -3413.347201339111,
        "y": 155.14938166437105
      },
      "dragging": false
    },
    {
      "id": "directReplyAgentflow_1",
      "position": {
        "x": -3140.589551568917,
        "y": 120.02728892675262
      },
      "data": {
        "id": "directReplyAgentflow_1",
        "label": "Out of Scope",
        "version": 1,
        "name": "directReplyAgentflow",
        "type": "DirectReply",
        "color": "#4DDBBB",
        "hideOutput": true,
        "baseClasses": [
          "DirectReply"
        ],
        "category": "Agent Flows",
        "description": "Directly reply to the user with a message",
        "inputParams": [
          {
            "label": "Message",
            "name": "directReplyMessage",
            "type": "string",
            "rows": 4,
            "acceptVariable": true,
            "id": "directReplyAgentflow_1-input-directReplyMessage-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "directReplyMessage": "<p>Xin lỗi, em không thể trả lời câu hỏi hiện tại của anh/chị.</p>",
          "undefined": ""
        },
        "outputAnchors": [],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 157,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": -3140.589551568917,
        "y": 120.02728892675262
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_3",
      "position": {
        "x": 769.322715603625,
        "y": 490.8955157078626
      },
      "data": {
        "id": "customFunctionAgentflow_3",
        "label": "Create Query",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_3-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_3-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_3-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "userEmail",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.user_email\" data-label=\"$flow.state.user_email\">{{ $flow.state.user_email }}</span> </p>"
            },
            {
              "variableName": "startDate",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.start_date\" data-label=\"$flow.state.start_date\">{{ $flow.state.start_date }}</span> </p>"
            },
            {
              "variableName": "endDate",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.end_date\" data-label=\"$flow.state.end_date\">{{ $flow.state.end_date }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const startDate = $startDate\nconst endDate = $endDate\nconst userEmail = $userEmail\n\nreturn {\n    \"start_date\": startDate,\n    \"end_date\": endDate,\n    \"user_email\": userEmail\n}\n",
          "customFunctionUpdateState": "",
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_3-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 158,
      "height": 65,
      "positionAbsolute": {
        "x": 769.322715603625,
        "y": 490.8955157078626
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_5",
      "position": {
        "x": 1283.0297134147916,
        "y": 379.0537221956264
      },
      "data": {
        "id": "customFunctionAgentflow_5",
        "label": "Query Data",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_5-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_5-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_5-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "filterData",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_3\" data-label=\"customFunctionAgentflow_3\">{{ customFunctionAgentflow_3 }}</span> </p>"
            },
            {
              "variableName": "apiUrl",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.api_url\" data-label=\"$flow.state.api_url\">{{ $flow.state.api_url }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const fetch = require( 'node-fetch' )\nconst url = $apiUrl + '/api/search/time'\n\nconst filterData = JSON.parse( $filterData )\nconst requestBody = {\n    filter: filterData\n}\n\nconst options = {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n    body: JSON.stringify( requestBody )\n}\n\ntry {\n    const response = await fetch( url, options )\n    if ( !response.ok ) {\n        return \"No\"\n    }\n    \n    const result = await response.json()\n    return JSON.stringify( result )\n} catch ( error ) {\n    return \"No\"\n}",
          "customFunctionUpdateState": "",
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_5-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 145,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 1283.0297134147916,
        "y": 379.0537221956264
      },
      "dragging": false
    },
    {
      "id": "conditionAgentflow_1",
      "position": {
        "x": 1738.26917929544,
        "y": 257.77778337710373
      },
      "data": {
        "id": "conditionAgentflow_1",
        "label": "Is API Server Error?",
        "version": 1,
        "name": "conditionAgentflow",
        "type": "Condition",
        "color": "#FFB938",
        "baseClasses": [
          "Condition"
        ],
        "category": "Agent Flows",
        "description": "Split flows based on If Else conditions",
        "inputParams": [
          {
            "label": "Conditions",
            "name": "conditions",
            "type": "array",
            "description": "Values to compare",
            "acceptVariable": true,
            "default": [
              {
                "type": "string",
                "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_2\" data-label=\"customFunctionAgentflow_2\">{{ customFunctionAgentflow_2 }}</span> </p>",
                "operation": "equal",
                "value2": "<p>No</p>"
              }
            ],
            "array": [
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  }
                ],
                "default": "string"
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "string",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Contains",
                    "name": "contains"
                  },
                  {
                    "label": "Ends With",
                    "name": "endsWith"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Contains",
                    "name": "notContains"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Regex",
                    "name": "regex"
                  },
                  {
                    "label": "Starts With",
                    "name": "startsWith"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "string",
                "default": "",
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                },
                "hide": {
                  "conditions[$index].operation": [
                    "isEmpty",
                    "notEmpty"
                  ]
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "number",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Smaller",
                    "name": "smaller"
                  },
                  {
                    "label": "Smaller Equal",
                    "name": "smallerEqual"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Larger",
                    "name": "larger"
                  },
                  {
                    "label": "Larger Equal",
                    "name": "largerEqual"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "number",
                "default": 0,
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "boolean",
                "default": false,
                "description": "First value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "boolean",
                "default": false,
                "description": "Second value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              }
            ],
            "id": "conditionAgentflow_1-input-conditions-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "conditions": [
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_5\" data-label=\"customFunctionAgentflow_5\">{{ customFunctionAgentflow_5 }}</span> </p>",
              "operation": "equal",
              "value2": "<p>No</p>"
            }
          ],
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "conditionAgentflow_1-output-0",
            "label": "Condition",
            "name": "conditionAgentflow"
          },
          {
            "id": "conditionAgentflow_1-output-1",
            "label": "Condition",
            "name": "conditionAgentflow"
          }
        ],
        "outputs": {
          "conditionAgentflow": ""
        },
        "selected": false
      },
      "type": "agentFlow",
      "width": 198,
      "height": 80,
      "selected": false,
      "positionAbsolute": {
        "x": 1738.26917929544,
        "y": 257.77778337710373
      },
      "dragging": false
    },
    {
      "id": "loopAgentflow_0",
      "position": {
        "x": 1991.8381061315554,
        "y": 196.39992836613345
      },
      "data": {
        "id": "loopAgentflow_0",
        "label": "Back to Does Counter reach Limit?",
        "version": 1,
        "name": "loopAgentflow",
        "type": "Loop",
        "color": "#FFA07A",
        "hideOutput": true,
        "baseClasses": [
          "Loop"
        ],
        "category": "Agent Flows",
        "description": "Loop back to a previous node",
        "inputParams": [
          {
            "label": "Loop Back To",
            "name": "loopBackToNode",
            "type": "asyncOptions",
            "loadMethod": "listPreviousNodes",
            "freeSolo": true,
            "id": "loopAgentflow_0-input-loopBackToNode-asyncOptions",
            "display": true
          },
          {
            "label": "Max Loop Count",
            "name": "maxLoopCount",
            "type": "number",
            "default": 5,
            "id": "loopAgentflow_0-input-maxLoopCount-number",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "loopBackToNode": "conditionAgentflow_0-Does Counter reach Limit?",
          "maxLoopCount": "3"
        },
        "outputAnchors": [],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 295,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 1991.8381061315554,
        "y": 196.39992836613345
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_7",
      "position": {
        "x": 1987.8659235197915,
        "y": 336.2038880022294
      },
      "data": {
        "id": "customFunctionAgentflow_7",
        "label": "Process Query Data",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_7-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_7-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_7-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "input",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_5\" data-label=\"customFunctionAgentflow_5\">{{ customFunctionAgentflow_5 }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const processData = ( input ) => {\n    try {\n        // Parse JSON\n        let attendanceData;\n        if ( typeof input === 'string' ) {\n            attendanceData = JSON.parse( input )\n        } else {\n            attendanceData = input;\n        }\n        \n        if ( !attendanceData.data || !Array.isArray( attendanceData.data ) || attendanceData.data.length === 0 ) {\n            return \"No\"\n        }\n        \n        let summaryParts = []\n        summaryParts.push( \"Thời gian check in/out:\" )\n        summaryParts.push( \"\" )\n        \n        attendanceData.data.forEach( ( record, index ) => {\n            summaryParts.push( `Ngày: ${ record.date }` )\n          \n            let checkinText = \"check in time: \"\n            if ( record.checkin_time ) {\n                checkinText += record.checkin_time\n            } else {\n                checkinText += \"không có\"\n            }\n            summaryParts.push( checkinText )\n\n          \n            let checkoutText = \"check out time: \"\n            if ( record.checkout_time ) {\n                checkoutText += record.checkout_time\n            } else {\n                checkoutText += \"không có\"\n            }\n            summaryParts.push( checkoutText )\n            \n            if ( index < attendanceData.data.length - 1 ) {\n                summaryParts.push( \"\" ) // Add empty line between records\n            }\n        } )\n        \n        // Join all parts into final summary string\n        const finalSummary = summaryParts.join( '\\n' )\n        \n        return finalSummary\n        \n    } catch ( error ) {\n        return \"No\"\n    }\n}\n\nreturn processData( $input )",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_7-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 201,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 1987.8659235197915,
        "y": 336.2038880022294
      },
      "dragging": false
    },
    {
      "id": "conditionAgentflow_5",
      "position": {
        "x": 2238.0589515915503,
        "y": 297.78449459352294
      },
      "data": {
        "id": "conditionAgentflow_5",
        "label": "Any Data found?",
        "version": 1,
        "name": "conditionAgentflow",
        "type": "Condition",
        "color": "#FFB938",
        "baseClasses": [
          "Condition"
        ],
        "category": "Agent Flows",
        "description": "Split flows based on If Else conditions",
        "inputParams": [
          {
            "label": "Conditions",
            "name": "conditions",
            "type": "array",
            "description": "Values to compare",
            "acceptVariable": true,
            "default": [
              {
                "type": "string",
                "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_4\" data-label=\"customFunctionAgentflow_4\">{{ customFunctionAgentflow_4 }}</span> </p>",
                "operation": "equal",
                "value2": "<p>No</p>"
              }
            ],
            "array": [
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  }
                ],
                "default": "string"
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "string",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Contains",
                    "name": "contains"
                  },
                  {
                    "label": "Ends With",
                    "name": "endsWith"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Contains",
                    "name": "notContains"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Regex",
                    "name": "regex"
                  },
                  {
                    "label": "Starts With",
                    "name": "startsWith"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "string",
                "default": "",
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                },
                "hide": {
                  "conditions[$index].operation": [
                    "isEmpty",
                    "notEmpty"
                  ]
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "number",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Smaller",
                    "name": "smaller"
                  },
                  {
                    "label": "Smaller Equal",
                    "name": "smallerEqual"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Larger",
                    "name": "larger"
                  },
                  {
                    "label": "Larger Equal",
                    "name": "largerEqual"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "number",
                "default": 0,
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "boolean",
                "default": false,
                "description": "First value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "boolean",
                "default": false,
                "description": "Second value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              }
            ],
            "id": "conditionAgentflow_5-input-conditions-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "conditions": [
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_7\" data-label=\"customFunctionAgentflow_7\">{{ customFunctionAgentflow_7 }}</span> </p>",
              "operation": "equal",
              "value2": "<p>No</p>"
            }
          ]
        },
        "outputAnchors": [
          {
            "id": "conditionAgentflow_5-output-0",
            "label": "Condition",
            "name": "conditionAgentflow"
          },
          {
            "id": "conditionAgentflow_5-output-1",
            "label": "Condition",
            "name": "conditionAgentflow"
          }
        ],
        "outputs": {
          "conditionAgentflow": ""
        },
        "selected": false
      },
      "type": "agentFlow",
      "width": 179,
      "height": 80,
      "selected": false,
      "positionAbsolute": {
        "x": 2238.0589515915503,
        "y": 297.78449459352294
      },
      "dragging": false
    },
    {
      "id": "directReplyAgentflow_5",
      "position": {
        "x": 2492.947053288507,
        "y": 263.2167627356447
      },
      "data": {
        "id": "directReplyAgentflow_5",
        "label": "Data Not Found",
        "version": 1,
        "name": "directReplyAgentflow",
        "type": "DirectReply",
        "color": "#4DDBBB",
        "hideOutput": true,
        "baseClasses": [
          "DirectReply"
        ],
        "category": "Agent Flows",
        "description": "Directly reply to the user with a message",
        "inputParams": [
          {
            "label": "Message",
            "name": "directReplyMessage",
            "type": "string",
            "rows": 4,
            "acceptVariable": true,
            "id": "directReplyAgentflow_5-input-directReplyMessage-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "directReplyMessage": "<p>Xin lỗi, em không thể tìm thấy dữ liệu mà anh/chị cần trong cơ sở dữ liệu.</p>",
          "undefined": ""
        },
        "outputAnchors": [],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 172,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 2492.947053288507,
        "y": 263.2167627356447
      },
      "dragging": false
    },
    {
      "id": "llmAgentflow_3",
      "position": {
        "x": 2966.2659699692244,
        "y": 344.6204683710786
      },
      "data": {
        "id": "llmAgentflow_3",
        "label": "Generate response",
        "version": 1,
        "name": "llmAgentflow",
        "type": "LLM",
        "color": "#64B5F6",
        "baseClasses": [
          "LLM"
        ],
        "category": "Agent Flows",
        "description": "Large language models to analyze user-provided inputs and generate responses",
        "inputParams": [
          {
            "label": "Model",
            "name": "llmModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "llmAgentflow_3-input-llmModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "llmMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "llmAgentflow_3-input-llmMessages-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "llmEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "llmAgentflow_3-input-llmEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "llmMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "llmEnableMemory": true
            },
            "id": "llmAgentflow_3-input-llmMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "llmMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "llmMemoryType": "windowSize"
            },
            "id": "llmAgentflow_3-input-llmMemoryWindowSize-number",
            "display": false
          },
          {
            "label": "Max Token Limit",
            "name": "llmMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "llmMemoryType": "conversationSummaryBuffer"
            },
            "id": "llmAgentflow_3-input-llmMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "llmUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "llmEnableMemory": true
            },
            "id": "llmAgentflow_3-input-llmUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "llmReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "llmAgentflow_3-input-llmReturnResponseAs-options",
            "display": true
          },
          {
            "label": "JSON Structured Output",
            "name": "llmStructuredOutput",
            "description": "Instruct the LLM to give output in a JSON structured schema",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string"
              },
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "String Array",
                    "name": "stringArray"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  },
                  {
                    "label": "Enum",
                    "name": "enum"
                  },
                  {
                    "label": "JSON Array",
                    "name": "jsonArray"
                  }
                ]
              },
              {
                "label": "Enum Values",
                "name": "enumValues",
                "type": "string",
                "placeholder": "value1, value2, value3",
                "description": "Enum values. Separated by comma",
                "optional": true,
                "show": {
                  "llmStructuredOutput[$index].type": "enum"
                }
              },
              {
                "label": "JSON Schema",
                "name": "jsonSchema",
                "type": "code",
                "placeholder": "{\n    \"answer\": {\n        \"type\": \"string\",\n        \"description\": \"Value of the answer\"\n    },\n    \"reason\": {\n        \"type\": \"string\",\n        \"description\": \"Reason for the answer\"\n    },\n    \"optional\": {\n        \"type\": \"boolean\"\n    },\n    \"count\": {\n        \"type\": \"number\"\n    },\n    \"children\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"string\",\n                    \"description\": \"Value of the children's answer\"\n                }\n            }\n        }\n    }\n}",
                "description": "JSON schema for the structured output",
                "optional": true,
                "hideCodeExecute": true,
                "show": {
                  "llmStructuredOutput[$index].type": "jsonArray"
                }
              },
              {
                "label": "Description",
                "name": "description",
                "type": "string",
                "placeholder": "Description of the key"
              }
            ],
            "id": "llmAgentflow_3-input-llmStructuredOutput-array",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "llmUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "llmAgentflow_3-input-llmUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "llmModel": "chatGoogleGenerativeAI",
          "llmMessages": [
            {
              "role": "system",
              "content": "<h1>Role</h1><p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.assistant_role\" data-label=\"$flow.state.assistant_role\">{{ $flow.state.assistant_role }}</span></p><p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.assistant_skill\" data-label=\"$flow.state.assistant_skill\">{{ $flow.state.assistant_skill }}</span></p><h1>Tone</h1><p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.assistant_tone\" data-label=\"$flow.state.assistant_tone\">{{ $flow.state.assistant_tone }}</span></p><h1>Cách xưng hô trong Tiếng Việt</h1><p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.vn_pronoun\" data-label=\"$flow.state.vn_pronoun\">{{ $flow.state.vn_pronoun }}</span></p><h1>Task</h1><p>Dựa vào nội dung câu hỏi của người dùng và các thông tin ngữ cảnh hiện tại, hãy trả lời câu hỏi của người dùng.</p><p>Ngữ cảnh hiện tại:</p><ul><li><p>Ngày hiện tại: <span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_14\" data-label=\"customFunctionAgentflow_14\">{{ customFunctionAgentflow_14 }}</span> </p></li></ul><ul><li><p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_7\" data-label=\"customFunctionAgentflow_7\">{{ customFunctionAgentflow_7 }}</span></p></li></ul><h1>Câu hỏi</h1><p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.user_question\" data-label=\"$flow.state.user_question\">{{ $flow.state.user_question }}</span></p>"
            }
          ],
          "llmEnableMemory": true,
          "llmReturnResponseAs": "assistantMessage",
          "llmStructuredOutput": "",
          "llmUpdateState": "",
          "llmModelConfig": {
            "cache": "",
            "modelName": "gemini-2.5-flash-preview-05-20",
            "customModelName": "",
            "temperature": 0.9,
            "streaming": true,
            "maxOutputTokens": "",
            "topP": "",
            "topK": "",
            "safetySettings": "",
            "baseUrl": "",
            "allowImageUploads": "",
            "llmModel": "chatGoogleGenerativeAI"
          },
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "llmAgentflow_3-output-llmAgentflow",
            "label": "LLM",
            "name": "llmAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 283,
      "height": 72,
      "selected": false,
      "positionAbsolute": {
        "x": 2966.2659699692244,
        "y": 344.6204683710786
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_20",
      "position": {
        "x": 774.418247876664,
        "y": 658.9400043948006
      },
      "data": {
        "id": "customFunctionAgentflow_20",
        "label": "Create Query",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_20-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_20-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_20-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "userEmail",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.user_email\" data-label=\"$flow.state.user_email\">{{ $flow.state.user_email }}</span> </p>"
            },
            {
              "variableName": "startDate",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.start_date\" data-label=\"$flow.state.start_date\">{{ $flow.state.start_date }}</span> </p>"
            },
            {
              "variableName": "endDate",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.end_date\" data-label=\"$flow.state.end_date\">{{ $flow.state.end_date }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const startDate = $startDate\nconst endDate = $endDate\nconst userEmail = $userEmail\n\nreturn {\n    \"start_date\": startDate,\n    \"end_date\": endDate,\n    \"user_email\": userEmail\n}\n",
          "customFunctionUpdateState": "",
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_20-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 158,
      "height": 65,
      "positionAbsolute": {
        "x": 774.418247876664,
        "y": 658.9400043948006
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_21",
      "position": {
        "x": 1284.5023509370858,
        "y": 627.3310662552058
      },
      "data": {
        "id": "customFunctionAgentflow_21",
        "label": "Query Data",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_21-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_21-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_21-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "filterData",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_20\" data-label=\"customFunctionAgentflow_20\">{{ customFunctionAgentflow_20 }}</span> </p>"
            },
            {
              "variableName": "apiUrl",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.api_url\" data-label=\"$flow.state.api_url\">{{ $flow.state.api_url }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const fetch = require( 'node-fetch' )\nconst url = $apiUrl + '/api/search/late'\n\nconst filterData = JSON.parse( $filterData )\nconst requestBody = {\n    filter: filterData\n}\n\nconst options = {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n    body: JSON.stringify( requestBody )\n}\n\ntry {\n    const response = await fetch( url, options )\n    if ( !response.ok ) {\n        return \"No\"\n    }\n    \n    const result = await response.json()\n    return JSON.stringify( result )\n} catch ( error ) {\n    return \"No\"\n}",
          "customFunctionUpdateState": "",
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_21-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 145,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 1284.5023509370858,
        "y": 627.3310662552058
      },
      "dragging": false
    },
    {
      "id": "conditionAgentflow_12",
      "position": {
        "x": 1719.858236632144,
        "y": 520.4808165571366
      },
      "data": {
        "id": "conditionAgentflow_12",
        "label": "Is API Server Error?",
        "version": 1,
        "name": "conditionAgentflow",
        "type": "Condition",
        "color": "#FFB938",
        "baseClasses": [
          "Condition"
        ],
        "category": "Agent Flows",
        "description": "Split flows based on If Else conditions",
        "inputParams": [
          {
            "label": "Conditions",
            "name": "conditions",
            "type": "array",
            "description": "Values to compare",
            "acceptVariable": true,
            "default": [
              {
                "type": "string",
                "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_2\" data-label=\"customFunctionAgentflow_2\">{{ customFunctionAgentflow_2 }}</span> </p>",
                "operation": "equal",
                "value2": "<p>No</p>"
              }
            ],
            "array": [
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  }
                ],
                "default": "string"
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "string",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Contains",
                    "name": "contains"
                  },
                  {
                    "label": "Ends With",
                    "name": "endsWith"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Contains",
                    "name": "notContains"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Regex",
                    "name": "regex"
                  },
                  {
                    "label": "Starts With",
                    "name": "startsWith"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "string",
                "default": "",
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                },
                "hide": {
                  "conditions[$index].operation": [
                    "isEmpty",
                    "notEmpty"
                  ]
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "number",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Smaller",
                    "name": "smaller"
                  },
                  {
                    "label": "Smaller Equal",
                    "name": "smallerEqual"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Larger",
                    "name": "larger"
                  },
                  {
                    "label": "Larger Equal",
                    "name": "largerEqual"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "number",
                "default": 0,
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "boolean",
                "default": false,
                "description": "First value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "boolean",
                "default": false,
                "description": "Second value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              }
            ],
            "id": "conditionAgentflow_12-input-conditions-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "conditions": [
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_21\" data-label=\"customFunctionAgentflow_21\">{{ customFunctionAgentflow_21 }}</span> </p>",
              "operation": "equal",
              "value2": "<p>No</p>"
            }
          ],
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "conditionAgentflow_12-output-0",
            "label": "Condition",
            "name": "conditionAgentflow"
          },
          {
            "id": "conditionAgentflow_12-output-1",
            "label": "Condition",
            "name": "conditionAgentflow"
          }
        ],
        "outputs": {
          "conditionAgentflow": ""
        },
        "selected": false
      },
      "type": "agentFlow",
      "width": 198,
      "height": 80,
      "selected": false,
      "positionAbsolute": {
        "x": 1719.858236632144,
        "y": 520.4808165571366
      },
      "dragging": false
    },
    {
      "id": "loopAgentflow_6",
      "position": {
        "x": 1980.2079627927571,
        "y": 466.3817427833957
      },
      "data": {
        "id": "loopAgentflow_6",
        "label": "Back to Does Counter reach Limit?",
        "version": 1,
        "name": "loopAgentflow",
        "type": "Loop",
        "color": "#FFA07A",
        "hideOutput": true,
        "baseClasses": [
          "Loop"
        ],
        "category": "Agent Flows",
        "description": "Loop back to a previous node",
        "inputParams": [
          {
            "label": "Loop Back To",
            "name": "loopBackToNode",
            "type": "asyncOptions",
            "loadMethod": "listPreviousNodes",
            "freeSolo": true,
            "id": "loopAgentflow_6-input-loopBackToNode-asyncOptions",
            "display": true
          },
          {
            "label": "Max Loop Count",
            "name": "maxLoopCount",
            "type": "number",
            "default": 5,
            "id": "loopAgentflow_6-input-maxLoopCount-number",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "loopBackToNode": "conditionAgentflow_3-Does Counter reach Limit?",
          "maxLoopCount": "3"
        },
        "outputAnchors": [],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 295,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 1980.2079627927571,
        "y": 466.3817427833957
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_22",
      "position": {
        "x": 1978.3393637555978,
        "y": 589.9722668538581
      },
      "data": {
        "id": "customFunctionAgentflow_22",
        "label": "Process Query Data",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_22-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_22-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_22-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "input",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_21\" data-label=\"customFunctionAgentflow_21\">{{ customFunctionAgentflow_21 }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const processData = ( input ) => {\n    try {\n        // Parse JSON\n        let data;\n        if ( typeof input === 'string' ) {\n            data = JSON.parse( input )\n        } else {\n            data = input;\n        }\n        \n        if ( !data.data || !Array.isArray( data.data ) || data.data.length === 0 ) {\n            return \"No-1\"\n        }\n\n        let summaryParts = []\n\n      data.data.forEach( ( record, index ) => {\n\n            const statusText = record.is_late ? \"Đi muộn\" : \"Đúng giờ\"\n            summaryParts.push( `Ngày: ${ record.date } - ${ statusText }` )\n          \n            if ( index < data.data.length - 1 ) {\n                summaryParts.push( \"\" ) // Add empty line between records\n            }\n        } )\n        \n        // Join all parts into final summary string\n        const finalSummary = summaryParts.join( '\\n' )\n        return finalSummary\n        \n    } catch ( error ) {\n        return \"No-0\"\n    }\n}\n\nreturn processData( $input )",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_22-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 201,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 1978.3393637555978,
        "y": 589.9722668538581
      },
      "dragging": false
    },
    {
      "id": "conditionAgentflow_13",
      "position": {
        "x": 2241.6848292562872,
        "y": 555.6443670380565
      },
      "data": {
        "id": "conditionAgentflow_13",
        "label": "Any Data found?",
        "version": 1,
        "name": "conditionAgentflow",
        "type": "Condition",
        "color": "#FFB938",
        "baseClasses": [
          "Condition"
        ],
        "category": "Agent Flows",
        "description": "Split flows based on If Else conditions",
        "inputParams": [
          {
            "label": "Conditions",
            "name": "conditions",
            "type": "array",
            "description": "Values to compare",
            "acceptVariable": true,
            "default": [
              {
                "type": "string",
                "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_4\" data-label=\"customFunctionAgentflow_4\">{{ customFunctionAgentflow_4 }}</span> </p>",
                "operation": "equal",
                "value2": "<p>No</p>"
              }
            ],
            "array": [
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  }
                ],
                "default": "string"
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "string",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Contains",
                    "name": "contains"
                  },
                  {
                    "label": "Ends With",
                    "name": "endsWith"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Contains",
                    "name": "notContains"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Regex",
                    "name": "regex"
                  },
                  {
                    "label": "Starts With",
                    "name": "startsWith"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "string",
                "default": "",
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                },
                "hide": {
                  "conditions[$index].operation": [
                    "isEmpty",
                    "notEmpty"
                  ]
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "number",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Smaller",
                    "name": "smaller"
                  },
                  {
                    "label": "Smaller Equal",
                    "name": "smallerEqual"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Larger",
                    "name": "larger"
                  },
                  {
                    "label": "Larger Equal",
                    "name": "largerEqual"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "number",
                "default": 0,
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "boolean",
                "default": false,
                "description": "First value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "boolean",
                "default": false,
                "description": "Second value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              }
            ],
            "id": "conditionAgentflow_13-input-conditions-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "conditions": [
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_22\" data-label=\"customFunctionAgentflow_22\">{{ customFunctionAgentflow_22 }}</span> </p>",
              "operation": "equal",
              "value2": "<p>No</p>"
            }
          ]
        },
        "outputAnchors": [
          {
            "id": "conditionAgentflow_13-output-0",
            "label": "Condition",
            "name": "conditionAgentflow"
          },
          {
            "id": "conditionAgentflow_13-output-1",
            "label": "Condition",
            "name": "conditionAgentflow"
          }
        ],
        "outputs": {
          "conditionAgentflow": ""
        },
        "selected": false
      },
      "type": "agentFlow",
      "width": 179,
      "height": 80,
      "selected": false,
      "positionAbsolute": {
        "x": 2241.6848292562872,
        "y": 555.6443670380565
      },
      "dragging": false
    },
    {
      "id": "directReplyAgentflow_2",
      "position": {
        "x": 2490.690127678947,
        "y": 507.3043180738712
      },
      "data": {
        "id": "directReplyAgentflow_2",
        "label": "Data Not Found",
        "version": 1,
        "name": "directReplyAgentflow",
        "type": "DirectReply",
        "color": "#4DDBBB",
        "hideOutput": true,
        "baseClasses": [
          "DirectReply"
        ],
        "category": "Agent Flows",
        "description": "Directly reply to the user with a message",
        "inputParams": [
          {
            "label": "Message",
            "name": "directReplyMessage",
            "type": "string",
            "rows": 4,
            "acceptVariable": true,
            "id": "directReplyAgentflow_2-input-directReplyMessage-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "directReplyMessage": "<p>Xin lỗi, em không thể tìm thấy dữ liệu mà anh/chị cần trong cơ sở dữ liệu.</p>",
          "undefined": ""
        },
        "outputAnchors": [],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 172,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 2490.690127678947,
        "y": 507.3043180738712
      },
      "dragging": false
    },
    {
      "id": "llmAgentflow_7",
      "position": {
        "x": 2964.8364660466273,
        "y": 610.5775704009312
      },
      "data": {
        "id": "llmAgentflow_7",
        "label": "Generate response",
        "version": 1,
        "name": "llmAgentflow",
        "type": "LLM",
        "color": "#64B5F6",
        "baseClasses": [
          "LLM"
        ],
        "category": "Agent Flows",
        "description": "Large language models to analyze user-provided inputs and generate responses",
        "inputParams": [
          {
            "label": "Model",
            "name": "llmModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "llmAgentflow_7-input-llmModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "llmMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "llmAgentflow_7-input-llmMessages-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "llmEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "llmAgentflow_7-input-llmEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "llmMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "llmEnableMemory": true
            },
            "id": "llmAgentflow_7-input-llmMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "llmMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "llmMemoryType": "windowSize"
            },
            "id": "llmAgentflow_7-input-llmMemoryWindowSize-number",
            "display": false
          },
          {
            "label": "Max Token Limit",
            "name": "llmMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "llmMemoryType": "conversationSummaryBuffer"
            },
            "id": "llmAgentflow_7-input-llmMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "llmUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "llmEnableMemory": true
            },
            "id": "llmAgentflow_7-input-llmUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "llmReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "llmAgentflow_7-input-llmReturnResponseAs-options",
            "display": true
          },
          {
            "label": "JSON Structured Output",
            "name": "llmStructuredOutput",
            "description": "Instruct the LLM to give output in a JSON structured schema",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string"
              },
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "String Array",
                    "name": "stringArray"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  },
                  {
                    "label": "Enum",
                    "name": "enum"
                  },
                  {
                    "label": "JSON Array",
                    "name": "jsonArray"
                  }
                ]
              },
              {
                "label": "Enum Values",
                "name": "enumValues",
                "type": "string",
                "placeholder": "value1, value2, value3",
                "description": "Enum values. Separated by comma",
                "optional": true,
                "show": {
                  "llmStructuredOutput[$index].type": "enum"
                }
              },
              {
                "label": "JSON Schema",
                "name": "jsonSchema",
                "type": "code",
                "placeholder": "{\n    \"answer\": {\n        \"type\": \"string\",\n        \"description\": \"Value of the answer\"\n    },\n    \"reason\": {\n        \"type\": \"string\",\n        \"description\": \"Reason for the answer\"\n    },\n    \"optional\": {\n        \"type\": \"boolean\"\n    },\n    \"count\": {\n        \"type\": \"number\"\n    },\n    \"children\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"string\",\n                    \"description\": \"Value of the children's answer\"\n                }\n            }\n        }\n    }\n}",
                "description": "JSON schema for the structured output",
                "optional": true,
                "hideCodeExecute": true,
                "show": {
                  "llmStructuredOutput[$index].type": "jsonArray"
                }
              },
              {
                "label": "Description",
                "name": "description",
                "type": "string",
                "placeholder": "Description of the key"
              }
            ],
            "id": "llmAgentflow_7-input-llmStructuredOutput-array",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "llmUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "llmAgentflow_7-input-llmUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "llmModel": "chatGoogleGenerativeAI",
          "llmMessages": [
            {
              "role": "system",
              "content": "<h1>Role</h1><p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.assistant_role\" data-label=\"$flow.state.assistant_role\">{{ $flow.state.assistant_role }}</span></p><p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.assistant_skill\" data-label=\"$flow.state.assistant_skill\">{{ $flow.state.assistant_skill }}</span></p><h1>Tone</h1><p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.assistant_tone\" data-label=\"$flow.state.assistant_tone\">{{ $flow.state.assistant_tone }}</span></p><h1>Cách xưng hô trong Tiếng Việt</h1><p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.vn_pronoun\" data-label=\"$flow.state.vn_pronoun\">{{ $flow.state.vn_pronoun }}</span></p><h1>Task</h1><p>Dựa vào nội dung câu hỏi của người dùng và các thông tin ngữ cảnh hiện tại, hãy trả lời câu hỏi của người dùng.</p><p>Ngữ cảnh hiện tại:</p><ul><li><p>Ngày hiện tại: <span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_17\" data-label=\"customFunctionAgentflow_17\">{{ customFunctionAgentflow_17 }}</span> </p></li></ul><ul><li><p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_22\" data-label=\"customFunctionAgentflow_22\">{{ customFunctionAgentflow_22 }}</span></p></li></ul>"
            }
          ],
          "llmEnableMemory": true,
          "llmMemoryType": "allMessages",
          "llmUserMessage": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.user_question\" data-label=\"$flow.state.user_question\">{{ $flow.state.user_question }}</span> </p>",
          "llmReturnResponseAs": "userMessage",
          "llmStructuredOutput": "",
          "llmUpdateState": "",
          "llmModelConfig": {
            "cache": "",
            "modelName": "gemini-2.5-flash-preview-05-20",
            "customModelName": "",
            "temperature": 0.9,
            "streaming": true,
            "maxOutputTokens": "",
            "topP": "",
            "topK": "",
            "safetySettings": "",
            "baseUrl": "",
            "allowImageUploads": "",
            "llmModel": "chatGoogleGenerativeAI"
          },
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "llmAgentflow_7-output-llmAgentflow",
            "label": "LLM",
            "name": "llmAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 283,
      "height": 72,
      "selected": false,
      "positionAbsolute": {
        "x": 2964.8364660466273,
        "y": 610.5775704009312
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_30",
      "position": {
        "x": 771.7484307012389,
        "y": 806.2096079079762
      },
      "data": {
        "id": "customFunctionAgentflow_30",
        "label": "Create Query",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_30-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_30-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_30-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "userEmail",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.user_email\" data-label=\"$flow.state.user_email\">{{ $flow.state.user_email }}</span> </p>"
            },
            {
              "variableName": "startDate",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.start_date\" data-label=\"$flow.state.start_date\">{{ $flow.state.start_date }}</span> </p>"
            },
            {
              "variableName": "endDate",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.end_date\" data-label=\"$flow.state.end_date\">{{ $flow.state.end_date }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const startDate = $startDate\nconst endDate = $endDate\nconst userEmail = $userEmail\n\nreturn {\n    \"start_date\": startDate,\n    \"end_date\": endDate,\n    \"user_email\": userEmail\n}\n",
          "customFunctionUpdateState": "",
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_30-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 158,
      "height": 65,
      "positionAbsolute": {
        "x": 771.7484307012389,
        "y": 806.2096079079762
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_31",
      "position": {
        "x": 1294.5965417595808,
        "y": 854.7807793465036
      },
      "data": {
        "id": "customFunctionAgentflow_31",
        "label": "Query Data",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_31-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_31-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_31-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "filterData",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_30\" data-label=\"customFunctionAgentflow_30\">{{ customFunctionAgentflow_30 }}</span> </p>"
            },
            {
              "variableName": "apiUrl",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.api_url\" data-label=\"$flow.state.api_url\">{{ $flow.state.api_url }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const fetch = require( 'node-fetch' )\nconst url = $apiUrl + '/api/search/attendance'\n\nconst filterData = JSON.parse( $filterData )\nconst requestBody = {\n    filter: filterData\n}\n\nconst options = {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n    body: JSON.stringify( requestBody )\n}\n\ntry {\n    const response = await fetch( url, options )\n    if ( !response.ok ) {\n        return \"No\"\n    }\n    \n    const result = await response.json()\n    return JSON.stringify( result )\n} catch ( error ) {\n    return \"No\"\n}",
          "customFunctionUpdateState": "",
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_31-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 145,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 1294.5965417595808,
        "y": 854.7807793465036
      },
      "dragging": false
    },
    {
      "id": "conditionAgentflow_18",
      "position": {
        "x": 1731.0192984745781,
        "y": 798.4180877985971
      },
      "data": {
        "id": "conditionAgentflow_18",
        "label": "Is API Server Error?",
        "version": 1,
        "name": "conditionAgentflow",
        "type": "Condition",
        "color": "#FFB938",
        "baseClasses": [
          "Condition"
        ],
        "category": "Agent Flows",
        "description": "Split flows based on If Else conditions",
        "inputParams": [
          {
            "label": "Conditions",
            "name": "conditions",
            "type": "array",
            "description": "Values to compare",
            "acceptVariable": true,
            "default": [
              {
                "type": "string",
                "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_2\" data-label=\"customFunctionAgentflow_2\">{{ customFunctionAgentflow_2 }}</span> </p>",
                "operation": "equal",
                "value2": "<p>No</p>"
              }
            ],
            "array": [
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  }
                ],
                "default": "string"
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "string",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Contains",
                    "name": "contains"
                  },
                  {
                    "label": "Ends With",
                    "name": "endsWith"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Contains",
                    "name": "notContains"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Regex",
                    "name": "regex"
                  },
                  {
                    "label": "Starts With",
                    "name": "startsWith"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "string",
                "default": "",
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                },
                "hide": {
                  "conditions[$index].operation": [
                    "isEmpty",
                    "notEmpty"
                  ]
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "number",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Smaller",
                    "name": "smaller"
                  },
                  {
                    "label": "Smaller Equal",
                    "name": "smallerEqual"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Larger",
                    "name": "larger"
                  },
                  {
                    "label": "Larger Equal",
                    "name": "largerEqual"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "number",
                "default": 0,
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "boolean",
                "default": false,
                "description": "First value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "boolean",
                "default": false,
                "description": "Second value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              }
            ],
            "id": "conditionAgentflow_18-input-conditions-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "conditions": [
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_31\" data-label=\"customFunctionAgentflow_31\">{{ customFunctionAgentflow_31 }}</span> </p>",
              "operation": "equal",
              "value2": "<p>No</p>"
            }
          ],
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "conditionAgentflow_18-output-0",
            "label": "Condition",
            "name": "conditionAgentflow"
          },
          {
            "id": "conditionAgentflow_18-output-1",
            "label": "Condition",
            "name": "conditionAgentflow"
          }
        ],
        "outputs": {
          "conditionAgentflow": ""
        },
        "selected": false
      },
      "type": "agentFlow",
      "width": 198,
      "height": 80,
      "selected": false,
      "positionAbsolute": {
        "x": 1731.0192984745781,
        "y": 798.4180877985971
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_32",
      "position": {
        "x": 2007.3727115304894,
        "y": 877.7622847980862
      },
      "data": {
        "id": "customFunctionAgentflow_32",
        "label": "Process Query Data",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_32-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_32-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_32-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "input",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_31\" data-label=\"customFunctionAgentflow_31\">{{ customFunctionAgentflow_31 }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const processData = ( input ) => {\n    try {\n        // Parse JSON\n        let data\n        if ( typeof input === 'string' ) {\n            data = JSON.parse( input )\n        } else {\n            data = input;\n        }\n        \n        if ( !data.data || !Array.isArray( data.data ) || data.data.length === 0 ) {\n            return \"No\"\n        }\n        \n        // Initialize variables to track different types of work day statistics\n        let totalAttendance = 0\n        let fullDays = 0         \n        let halfDays = 0         \n        let totalWorkingDays = 0 \n        \n        let fullDayDates = []\n        let halfDayDates = []\n\n        data.data.forEach( ( record ) => {\n            totalAttendance += record.attendance\n            totalWorkingDays += 1\n            \n            if ( record.attendance === 1 ) {\n                fullDays += 1\n                fullDayDates.push( record.date )\n            } else if ( record.attendance === 0.5 ) {\n                halfDays += 1\n                halfDayDates.push( record.date )\n            }\n            // Note: We could add more categories here for other attendance values if needed\n        } )\n\n        let summaryParts = []\n        \n        summaryParts.push( `Tổng số ngày công: ${ totalAttendance }` )\n        summaryParts.push( \"\" )\n        summaryParts.push( `Tổng số ngày đi làm: ${ totalWorkingDays }` )\n        summaryParts.push( \"\" )\n\n      \n        summaryParts.push( `Số ngày làm đủ công (1.0): ${ fullDays }` )\n        fullDayDates.forEach( ( date, index ) => {\n            summaryParts.push( `  ${ index + 1 }. ${ date }` )\n        } )\n        summaryParts.push( \"\" )\n\n      \n        summaryParts.push( `Số ngày làm nửa công (0.5): ${ halfDays }` )\n        halfDayDates.forEach( ( date, index ) => {\n            summaryParts.push( `  ${ index + 1 }. ${ date }` )\n        } )\n\n\n        // Join all parts into final summary string\n        const finalSummary = summaryParts.join( '\\n' )\n        \n        return finalSummary\n        \n    } catch ( error ) {\n        return \"No\"\n    }\n}\n\nreturn processData( $input )",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_32-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 201,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 2007.3727115304894,
        "y": 877.7622847980862
      },
      "dragging": false
    },
    {
      "id": "loopAgentflow_9",
      "position": {
        "x": 2012.7354785476664,
        "y": 754.1788507564756
      },
      "data": {
        "id": "loopAgentflow_9",
        "label": "Back to Query Data",
        "version": 1,
        "name": "loopAgentflow",
        "type": "Loop",
        "color": "#FFA07A",
        "hideOutput": true,
        "baseClasses": [
          "Loop"
        ],
        "category": "Agent Flows",
        "description": "Loop back to a previous node",
        "inputParams": [
          {
            "label": "Loop Back To",
            "name": "loopBackToNode",
            "type": "asyncOptions",
            "loadMethod": "listPreviousNodes",
            "freeSolo": true,
            "id": "loopAgentflow_9-input-loopBackToNode-asyncOptions",
            "display": true
          },
          {
            "label": "Max Loop Count",
            "name": "maxLoopCount",
            "type": "number",
            "default": 5,
            "id": "loopAgentflow_9-input-maxLoopCount-number",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "loopBackToNode": "conditionAgentflow_4-Does Counter reach Limit?",
          "maxLoopCount": "3"
        },
        "outputAnchors": [],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 197,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 2012.7354785476664,
        "y": 754.1788507564756
      },
      "dragging": false
    },
    {
      "id": "conditionAgentflow_19",
      "position": {
        "x": 2258.5300946361194,
        "y": 832.165845706867
      },
      "data": {
        "id": "conditionAgentflow_19",
        "label": "Any Data found?",
        "version": 1,
        "name": "conditionAgentflow",
        "type": "Condition",
        "color": "#FFB938",
        "baseClasses": [
          "Condition"
        ],
        "category": "Agent Flows",
        "description": "Split flows based on If Else conditions",
        "inputParams": [
          {
            "label": "Conditions",
            "name": "conditions",
            "type": "array",
            "description": "Values to compare",
            "acceptVariable": true,
            "default": [
              {
                "type": "string",
                "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_4\" data-label=\"customFunctionAgentflow_4\">{{ customFunctionAgentflow_4 }}</span> </p>",
                "operation": "equal",
                "value2": "<p>No</p>"
              }
            ],
            "array": [
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  }
                ],
                "default": "string"
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "string",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Contains",
                    "name": "contains"
                  },
                  {
                    "label": "Ends With",
                    "name": "endsWith"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Contains",
                    "name": "notContains"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Regex",
                    "name": "regex"
                  },
                  {
                    "label": "Starts With",
                    "name": "startsWith"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "string",
                "default": "",
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                },
                "hide": {
                  "conditions[$index].operation": [
                    "isEmpty",
                    "notEmpty"
                  ]
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "number",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Smaller",
                    "name": "smaller"
                  },
                  {
                    "label": "Smaller Equal",
                    "name": "smallerEqual"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Larger",
                    "name": "larger"
                  },
                  {
                    "label": "Larger Equal",
                    "name": "largerEqual"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "number",
                "default": 0,
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "boolean",
                "default": false,
                "description": "First value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "boolean",
                "default": false,
                "description": "Second value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              }
            ],
            "id": "conditionAgentflow_19-input-conditions-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "conditions": [
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_32\" data-label=\"customFunctionAgentflow_32\">{{ customFunctionAgentflow_32 }}</span> </p>",
              "operation": "equal",
              "value2": "<p>No</p>"
            }
          ]
        },
        "outputAnchors": [
          {
            "id": "conditionAgentflow_19-output-0",
            "label": "Condition",
            "name": "conditionAgentflow"
          },
          {
            "id": "conditionAgentflow_19-output-1",
            "label": "Condition",
            "name": "conditionAgentflow"
          }
        ],
        "outputs": {
          "conditionAgentflow": ""
        },
        "selected": false
      },
      "type": "agentFlow",
      "width": 179,
      "height": 80,
      "selected": false,
      "positionAbsolute": {
        "x": 2258.5300946361194,
        "y": 832.165845706867
      },
      "dragging": false
    },
    {
      "id": "llmAgentflow_12",
      "position": {
        "x": 2967.001717698934,
        "y": 942.2311373619756
      },
      "data": {
        "id": "llmAgentflow_12",
        "label": "Generate response",
        "version": 1,
        "name": "llmAgentflow",
        "type": "LLM",
        "color": "#64B5F6",
        "baseClasses": [
          "LLM"
        ],
        "category": "Agent Flows",
        "description": "Large language models to analyze user-provided inputs and generate responses",
        "inputParams": [
          {
            "label": "Model",
            "name": "llmModel",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "loadConfig": true,
            "id": "llmAgentflow_12-input-llmModel-asyncOptions",
            "display": true
          },
          {
            "label": "Messages",
            "name": "llmMessages",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Role",
                "name": "role",
                "type": "options",
                "options": [
                  {
                    "label": "System",
                    "name": "system"
                  },
                  {
                    "label": "Assistant",
                    "name": "assistant"
                  },
                  {
                    "label": "Developer",
                    "name": "developer"
                  },
                  {
                    "label": "User",
                    "name": "user"
                  }
                ]
              },
              {
                "label": "Content",
                "name": "content",
                "type": "string",
                "acceptVariable": true,
                "generateInstruction": true,
                "rows": 4
              }
            ],
            "id": "llmAgentflow_12-input-llmMessages-array",
            "display": true
          },
          {
            "label": "Enable Memory",
            "name": "llmEnableMemory",
            "type": "boolean",
            "description": "Enable memory for the conversation thread",
            "default": true,
            "optional": true,
            "id": "llmAgentflow_12-input-llmEnableMemory-boolean",
            "display": true
          },
          {
            "label": "Memory Type",
            "name": "llmMemoryType",
            "type": "options",
            "options": [
              {
                "label": "All Messages",
                "name": "allMessages",
                "description": "Retrieve all messages from the conversation"
              },
              {
                "label": "Window Size",
                "name": "windowSize",
                "description": "Uses a fixed window size to surface the last N messages"
              },
              {
                "label": "Conversation Summary",
                "name": "conversationSummary",
                "description": "Summarizes the whole conversation"
              },
              {
                "label": "Conversation Summary Buffer",
                "name": "conversationSummaryBuffer",
                "description": "Summarize conversations once token limit is reached. Default to 2000"
              }
            ],
            "optional": true,
            "default": "allMessages",
            "show": {
              "llmEnableMemory": true
            },
            "id": "llmAgentflow_12-input-llmMemoryType-options",
            "display": true
          },
          {
            "label": "Window Size",
            "name": "llmMemoryWindowSize",
            "type": "number",
            "default": "20",
            "description": "Uses a fixed window size to surface the last N messages",
            "show": {
              "llmMemoryType": "windowSize"
            },
            "id": "llmAgentflow_12-input-llmMemoryWindowSize-number",
            "display": false
          },
          {
            "label": "Max Token Limit",
            "name": "llmMemoryMaxTokenLimit",
            "type": "number",
            "default": "2000",
            "description": "Summarize conversations once token limit is reached. Default to 2000",
            "show": {
              "llmMemoryType": "conversationSummaryBuffer"
            },
            "id": "llmAgentflow_12-input-llmMemoryMaxTokenLimit-number",
            "display": false
          },
          {
            "label": "Input Message",
            "name": "llmUserMessage",
            "type": "string",
            "description": "Add an input message as user message at the end of the conversation",
            "rows": 4,
            "optional": true,
            "acceptVariable": true,
            "show": {
              "llmEnableMemory": true
            },
            "id": "llmAgentflow_12-input-llmUserMessage-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "llmReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "llmAgentflow_12-input-llmReturnResponseAs-options",
            "display": true
          },
          {
            "label": "JSON Structured Output",
            "name": "llmStructuredOutput",
            "description": "Instruct the LLM to give output in a JSON structured schema",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "string"
              },
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "String Array",
                    "name": "stringArray"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  },
                  {
                    "label": "Enum",
                    "name": "enum"
                  },
                  {
                    "label": "JSON Array",
                    "name": "jsonArray"
                  }
                ]
              },
              {
                "label": "Enum Values",
                "name": "enumValues",
                "type": "string",
                "placeholder": "value1, value2, value3",
                "description": "Enum values. Separated by comma",
                "optional": true,
                "show": {
                  "llmStructuredOutput[$index].type": "enum"
                }
              },
              {
                "label": "JSON Schema",
                "name": "jsonSchema",
                "type": "code",
                "placeholder": "{\n    \"answer\": {\n        \"type\": \"string\",\n        \"description\": \"Value of the answer\"\n    },\n    \"reason\": {\n        \"type\": \"string\",\n        \"description\": \"Reason for the answer\"\n    },\n    \"optional\": {\n        \"type\": \"boolean\"\n    },\n    \"count\": {\n        \"type\": \"number\"\n    },\n    \"children\": {\n        \"type\": \"array\",\n        \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"value\": {\n                    \"type\": \"string\",\n                    \"description\": \"Value of the children's answer\"\n                }\n            }\n        }\n    }\n}",
                "description": "JSON schema for the structured output",
                "optional": true,
                "hideCodeExecute": true,
                "show": {
                  "llmStructuredOutput[$index].type": "jsonArray"
                }
              },
              {
                "label": "Description",
                "name": "description",
                "type": "string",
                "placeholder": "Description of the key"
              }
            ],
            "id": "llmAgentflow_12-input-llmStructuredOutput-array",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "llmUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "llmAgentflow_12-input-llmUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "llmModel": "chatGoogleGenerativeAI",
          "llmMessages": [
            {
              "role": "system",
              "content": "<h1>Role</h1><p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.assistant_role\" data-label=\"$flow.state.assistant_role\">{{ $flow.state.assistant_role }}</span></p><p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.assistant_skill\" data-label=\"$flow.state.assistant_skill\">{{ $flow.state.assistant_skill }}</span></p><h1>Tone</h1><p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.assistant_tone\" data-label=\"$flow.state.assistant_tone\">{{ $flow.state.assistant_tone }}</span></p><h1>Cách xưng hô trong Tiếng Việt</h1><p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.vn_pronoun\" data-label=\"$flow.state.vn_pronoun\">{{ $flow.state.vn_pronoun }}</span></p><h1>Task</h1><p>Dựa vào nội dung câu hỏi của người dùng và các thông tin ngữ cảnh hiện tại, hãy trả lời câu hỏi của người dùng.</p><p>Ngữ cảnh hiện tại:</p><ul><li><p>Ngày hiện tại: <span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_23\" data-label=\"customFunctionAgentflow_23\">{{ customFunctionAgentflow_23 }}</span> </p></li></ul><ul><li><p><span class=\"variable\" data-type=\"mention\" data-id=\"customFunctionAgentflow_32\" data-label=\"customFunctionAgentflow_32\">{{ customFunctionAgentflow_32 }}</span></p></li></ul>"
            }
          ],
          "llmEnableMemory": true,
          "llmMemoryType": "allMessages",
          "llmUserMessage": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span> </p>",
          "llmReturnResponseAs": "userMessage",
          "llmStructuredOutput": "",
          "llmUpdateState": "",
          "llmModelConfig": {
            "cache": "",
            "modelName": "gemini-2.5-flash-preview-05-20",
            "customModelName": "",
            "temperature": 0.9,
            "streaming": true,
            "maxOutputTokens": "",
            "topP": "",
            "topK": "",
            "safetySettings": "",
            "baseUrl": "",
            "allowImageUploads": "",
            "llmModel": "chatGoogleGenerativeAI"
          },
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "llmAgentflow_12-output-llmAgentflow",
            "label": "LLM",
            "name": "llmAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 283,
      "height": 72,
      "selected": false,
      "positionAbsolute": {
        "x": 2967.001717698934,
        "y": 942.2311373619756
      },
      "dragging": false
    },
    {
      "id": "directReplyAgentflow_9",
      "position": {
        "x": 2497.0707783225457,
        "y": 787.4655292699366
      },
      "data": {
        "id": "directReplyAgentflow_9",
        "label": "Data Not Found",
        "version": 1,
        "name": "directReplyAgentflow",
        "type": "DirectReply",
        "color": "#4DDBBB",
        "hideOutput": true,
        "baseClasses": [
          "DirectReply"
        ],
        "category": "Agent Flows",
        "description": "Directly reply to the user with a message",
        "inputParams": [
          {
            "label": "Message",
            "name": "directReplyMessage",
            "type": "string",
            "rows": 4,
            "acceptVariable": true,
            "id": "directReplyAgentflow_9-input-directReplyMessage-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "directReplyMessage": "<p>Xin lỗi, em không thể tìm thấy dữ liệu mà anh/chị cần trong cơ sở dữ liệu.</p>",
          "undefined": ""
        },
        "outputAnchors": [],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 172,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 2497.0707783225457,
        "y": 787.4655292699366
      },
      "dragging": false
    },
    {
      "id": "executeFlowAgentflow_0",
      "position": {
        "x": -3142.197003281768,
        "y": 241.42611818893738
      },
      "data": {
        "id": "executeFlowAgentflow_0",
        "label": "Create time context object",
        "version": 1,
        "name": "executeFlowAgentflow",
        "type": "ExecuteFlow",
        "color": "#a3b18a",
        "baseClasses": [
          "ExecuteFlow"
        ],
        "category": "Agent Flows",
        "description": "Execute another flow",
        "inputParams": [
          {
            "label": "Connect Credential",
            "name": "credential",
            "type": "credential",
            "credentialNames": [
              "chatflowApi"
            ],
            "optional": true,
            "id": "executeFlowAgentflow_0-input-credential-credential",
            "display": true
          },
          {
            "label": "Select Flow",
            "name": "executeFlowSelectedFlow",
            "type": "asyncOptions",
            "loadMethod": "listFlows",
            "id": "executeFlowAgentflow_0-input-executeFlowSelectedFlow-asyncOptions",
            "display": true
          },
          {
            "label": "Input",
            "name": "executeFlowInput",
            "type": "string",
            "rows": 4,
            "acceptVariable": true,
            "id": "executeFlowAgentflow_0-input-executeFlowInput-string",
            "display": true
          },
          {
            "label": "Override Config",
            "name": "executeFlowOverrideConfig",
            "description": "Override the config passed to the flow",
            "type": "json",
            "optional": true,
            "id": "executeFlowAgentflow_0-input-executeFlowOverrideConfig-json",
            "display": true
          },
          {
            "label": "Base URL",
            "name": "executeFlowBaseURL",
            "type": "string",
            "description": "Base URL to Flowise. By default, it is the URL of the incoming request. Useful when you need to execute flow through an alternative route.",
            "placeholder": "http://localhost:3000",
            "optional": true,
            "id": "executeFlowAgentflow_0-input-executeFlowBaseURL-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "executeFlowReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "executeFlowAgentflow_0-input-executeFlowReturnResponseAs-options",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "executeFlowUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "executeFlowAgentflow_0-input-executeFlowUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "executeFlowSelectedFlow": "aaa22686-ac5a-432c-98f3-fe33dc092b50",
          "executeFlowInput": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.user_id\" data-label=\"$flow.state.user_id\">{{ $flow.state.user_id }}</span>|<span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.user_question\" data-label=\"$flow.state.user_question\">{{ $flow.state.user_question }}</span></p>",
          "executeFlowOverrideConfig": "",
          "executeFlowBaseURL": "",
          "executeFlowReturnResponseAs": "assistantMessage",
          "executeFlowUpdateState": "",
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "executeFlowAgentflow_0-output-executeFlowAgentflow",
            "label": "Execute Flow",
            "name": "executeFlowAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 243,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": -3142.197003281768,
        "y": 241.42611818893738
      },
      "dragging": false
    },
    {
      "id": "directReplyAgentflow_6",
      "position": {
        "x": -1962.8393343868133,
        "y": 207.4407994566928
      },
      "data": {
        "id": "directReplyAgentflow_6",
        "label": "Time is unidentifiable",
        "version": 1,
        "name": "directReplyAgentflow",
        "type": "DirectReply",
        "color": "#4DDBBB",
        "hideOutput": true,
        "baseClasses": [
          "DirectReply"
        ],
        "category": "Agent Flows",
        "description": "Directly reply to the user with a message",
        "inputParams": [
          {
            "label": "Message",
            "name": "directReplyMessage",
            "type": "string",
            "rows": 4,
            "acceptVariable": true,
            "id": "directReplyAgentflow_6-input-directReplyMessage-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "directReplyMessage": "<p>Dạ, anh/chị vui lòng cho em biết thời gian cụ thể để em hỗ trợ tra cứu chính xác nhé.</p>",
          "undefined": ""
        },
        "outputAnchors": [],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 210,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": -1962.8393343868133,
        "y": 207.4407994566928
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_0",
      "position": {
        "x": 556.9021104592018,
        "y": 459.16402583809634
      },
      "data": {
        "id": "customFunctionAgentflow_0",
        "label": "Reset Counter",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_0-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_0-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_0-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "counterQuery",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.counter_query\" data-label=\"$flow.state.counter_query\">{{ $flow.state.counter_query }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "return 0",
          "customFunctionUpdateState": [
            {
              "key": "counter_query",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output\" data-label=\"output\">{{ output }}</span> </p>"
            }
          ],
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_0-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 164,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 556.9021104592018,
        "y": 459.16402583809634
      },
      "dragging": false
    },
    {
      "id": "conditionAgentflow_0",
      "position": {
        "x": 986.685812695065,
        "y": 411.05781124875705
      },
      "data": {
        "id": "conditionAgentflow_0",
        "label": "Does Counter reach Limit?",
        "version": 1,
        "name": "conditionAgentflow",
        "type": "Condition",
        "color": "#FFB938",
        "baseClasses": [
          "Condition"
        ],
        "category": "Agent Flows",
        "description": "Split flows based on If Else conditions",
        "inputParams": [
          {
            "label": "Conditions",
            "name": "conditions",
            "type": "array",
            "description": "Values to compare",
            "acceptVariable": true,
            "default": [
              {
                "type": "string",
                "value1": "",
                "operation": "equal",
                "value2": ""
              }
            ],
            "array": [
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  }
                ],
                "default": "string"
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "string",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Contains",
                    "name": "contains"
                  },
                  {
                    "label": "Ends With",
                    "name": "endsWith"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Contains",
                    "name": "notContains"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Regex",
                    "name": "regex"
                  },
                  {
                    "label": "Starts With",
                    "name": "startsWith"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "string",
                "default": "",
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                },
                "hide": {
                  "conditions[$index].operation": [
                    "isEmpty",
                    "notEmpty"
                  ]
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "number",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Smaller",
                    "name": "smaller"
                  },
                  {
                    "label": "Smaller Equal",
                    "name": "smallerEqual"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Larger",
                    "name": "larger"
                  },
                  {
                    "label": "Larger Equal",
                    "name": "largerEqual"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "number",
                "default": 0,
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "boolean",
                "default": false,
                "description": "First value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "boolean",
                "default": false,
                "description": "Second value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              }
            ],
            "id": "conditionAgentflow_0-input-conditions-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "conditions": [
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.counter_query\" data-label=\"$flow.state.counter_query\">{{ $flow.state.counter_query }}</span> </p>",
              "operation": "equal",
              "value2": "<p>2</p>"
            }
          ],
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "conditionAgentflow_0-output-0",
            "label": "Condition",
            "name": "conditionAgentflow"
          },
          {
            "id": "conditionAgentflow_0-output-1",
            "label": "Condition",
            "name": "conditionAgentflow"
          }
        ],
        "outputs": {
          "conditionAgentflow": ""
        },
        "selected": false
      },
      "type": "agentFlow",
      "width": 243,
      "height": 80,
      "selected": false,
      "positionAbsolute": {
        "x": 986.685812695065,
        "y": 411.05781124875705
      },
      "dragging": false
    },
    {
      "id": "directReplyAgentflow_3",
      "position": {
        "x": 1276.201937168389,
        "y": 266.8398492146149
      },
      "data": {
        "id": "directReplyAgentflow_3",
        "label": "API Server Error",
        "version": 1,
        "name": "directReplyAgentflow",
        "type": "DirectReply",
        "color": "#4DDBBB",
        "hideOutput": true,
        "baseClasses": [
          "DirectReply"
        ],
        "category": "Agent Flows",
        "description": "Directly reply to the user with a message",
        "inputParams": [
          {
            "label": "Message",
            "name": "directReplyMessage",
            "type": "string",
            "rows": 4,
            "acceptVariable": true,
            "id": "directReplyAgentflow_3-input-directReplyMessage-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "directReplyMessage": "<p>Dạ, em xin lỗi, hệ thống bên em đang gặp một số lỗi kỹ thuật. Anh/chị vui lòng thử lại sau ạ.</p>"
        },
        "outputAnchors": [],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 176,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 1276.201937168389,
        "y": 266.8398492146149
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_1",
      "position": {
        "x": 1492.431384737504,
        "y": 326.4482513485584
      },
      "data": {
        "id": "customFunctionAgentflow_1",
        "label": "Update Counter",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_1-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_1-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_1-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "queryCounter",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.counter_query\" data-label=\"$flow.state.counter_query\">{{ $flow.state.counter_query }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "let counter = parseInt( $queryCounter, 10 ) \n\nreturn counter+=1",
          "customFunctionUpdateState": [
            {
              "key": "counter_query",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output\" data-label=\"output\">{{ output }}</span> </p>"
            }
          ]
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_1-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 174,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 1492.431384737504,
        "y": 326.4482513485584
      },
      "dragging": false
    },
    {
      "id": "conditionAgentflow_2",
      "position": {
        "x": -2219.382105137538,
        "y": 264.47590948702134
      },
      "data": {
        "id": "conditionAgentflow_2",
        "label": "Is time identifiable?",
        "version": 1,
        "name": "conditionAgentflow",
        "type": "Condition",
        "color": "#FFB938",
        "baseClasses": [
          "Condition"
        ],
        "category": "Agent Flows",
        "description": "Split flows based on If Else conditions",
        "inputParams": [
          {
            "label": "Conditions",
            "name": "conditions",
            "type": "array",
            "description": "Values to compare",
            "acceptVariable": true,
            "default": [
              {
                "type": "string",
                "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"executeFlowAgentflow_0\" data-label=\"executeFlowAgentflow_0\">{{ executeFlowAgentflow_0 }}</span> </p>",
                "operation": "equal",
                "value2": "<p>No</p>"
              }
            ],
            "array": [
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  }
                ],
                "default": "string"
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "string",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Contains",
                    "name": "contains"
                  },
                  {
                    "label": "Ends With",
                    "name": "endsWith"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Contains",
                    "name": "notContains"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Regex",
                    "name": "regex"
                  },
                  {
                    "label": "Starts With",
                    "name": "startsWith"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "string",
                "default": "",
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                },
                "hide": {
                  "conditions[$index].operation": [
                    "isEmpty",
                    "notEmpty"
                  ]
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "number",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Smaller",
                    "name": "smaller"
                  },
                  {
                    "label": "Smaller Equal",
                    "name": "smallerEqual"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Larger",
                    "name": "larger"
                  },
                  {
                    "label": "Larger Equal",
                    "name": "largerEqual"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "number",
                "default": 0,
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "boolean",
                "default": false,
                "description": "First value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "boolean",
                "default": false,
                "description": "Second value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              }
            ],
            "id": "conditionAgentflow_2-input-conditions-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "conditions": [
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"executeFlowAgentflow_0\" data-label=\"executeFlowAgentflow_0\">{{ executeFlowAgentflow_0 }}</span> </p>",
              "operation": "equal",
              "value2": "<p>No</p>"
            }
          ],
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "conditionAgentflow_2-output-0",
            "label": "Condition",
            "name": "conditionAgentflow"
          },
          {
            "id": "conditionAgentflow_2-output-1",
            "label": "Condition",
            "name": "conditionAgentflow"
          }
        ],
        "outputs": {
          "conditionAgentflow": ""
        },
        "selected": false
      },
      "type": "agentFlow",
      "width": 197,
      "height": 80,
      "selected": false,
      "positionAbsolute": {
        "x": -2219.382105137538,
        "y": 264.47590948702134
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_6",
      "position": {
        "x": -4176.731454759087,
        "y": 34.853404215771235
      },
      "data": {
        "id": "customFunctionAgentflow_6",
        "label": "Parse User Name",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_6-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_6-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_6-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "input",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const [ userInput, userId, userName, userEmail ] = $input.split( \"|\" )\nreturn userName",
          "customFunctionUpdateState": [
            {
              "key": "user_name",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output\" data-label=\"output\">{{ output }}</span> </p>"
            }
          ],
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_6-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 184,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": -4176.731454759087,
        "y": 34.853404215771235
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_8",
      "position": {
        "x": -3930.40673203889,
        "y": -28.12514746805121
      },
      "data": {
        "id": "customFunctionAgentflow_8",
        "label": "Parse User Email",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_8-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_8-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_8-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "input",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const [ userInput, userId, userName, userEmail ] = $input.split( \"|\" )\nreturn userEmail",
          "customFunctionUpdateState": [
            {
              "key": "user_email",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output\" data-label=\"output\">{{ output }}</span> </p>"
            }
          ]
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_8-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 181,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": -3930.40673203889,
        "y": -28.12514746805121
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_9",
      "position": {
        "x": -4406.125008606093,
        "y": -33.41908067584632
      },
      "data": {
        "id": "customFunctionAgentflow_9",
        "label": "Parse User ID",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_9-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_9-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_9-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "input",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const [ userInput, userId, userName, userEmail ] = $input.split( \"|\" )\nreturn userId",
          "customFunctionUpdateState": [
            {
              "key": "user_id",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output\" data-label=\"output\">{{ output }}</span> </p>"
            }
          ]
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_9-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 160,
      "height": 65,
      "positionAbsolute": {
        "x": -4406.125008606093,
        "y": -33.41908067584632
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_10",
      "position": {
        "x": -4649.773802960241,
        "y": 31.51228557195418
      },
      "data": {
        "id": "customFunctionAgentflow_10",
        "label": "Parse Question",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_10-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_10-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_10-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "input",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"question\" data-label=\"question\">{{ question }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const [ userInput, userId, userName, userEmail ] = $input.split( \"|\" )\nreturn userInput",
          "customFunctionUpdateState": [
            {
              "key": "user_question",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output\" data-label=\"output\">{{ output }}</span> </p>"
            }
          ]
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_10-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 170,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": -4649.773802960241,
        "y": 31.51228557195418
      },
      "dragging": false
    },
    {
      "id": "stickyNoteAgentflow_0",
      "position": {
        "x": -4839.134852117371,
        "y": -293.1151736620212
      },
      "data": {
        "id": "stickyNoteAgentflow_0",
        "label": "Sticky Note",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_0-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "hello|29:1LZVQUxhyhMQA5VKBzO8OyD9wv6xrQaNNmO8nBd2BOEz4G2q6_jIBRlDoI-sLJt_uIyr-4k_xWym19eAgc5HdXQ|Nguyen Duc Kien|ndkien.ts@cmc.com.vn"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_0-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 202,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": -4839.134852117371,
        "y": -293.1151736620212
      }
    },
    {
      "id": "customFunctionAgentflow_11",
      "position": {
        "x": -2824.8178158835876,
        "y": 268.4168329335371
      },
      "data": {
        "id": "customFunctionAgentflow_11",
        "label": "Get Start Date from Session",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_11-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_11-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_11-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "apiUrl",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.api_url\" data-label=\"$flow.state.api_url\">{{ $flow.state.api_url }}</span> </p>"
            },
            {
              "variableName": "userId",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.user_id\" data-label=\"$flow.state.user_id\">{{ $flow.state.user_id }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const fetch = require( 'node-fetch' )\n\nconst apiUrl = $apiUrl\nconst userId = $userId\n\nconst response = await fetch( `${ apiUrl }/api/session/${ userId }`, {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json',\n    }\n} )\n\nif ( !response.ok ) {\n    return \"No\"\n}\n\nconst result = await response.json()\nreturn result.data.start_date",
          "customFunctionUpdateState": [
            {
              "key": "start_date",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output\" data-label=\"output\">{{ output }}</span> </p>"
            }
          ],
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_11-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 252,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": -2824.8178158835876,
        "y": 268.4168329335371
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_12",
      "position": {
        "x": -2521.2115493148876,
        "y": 332.51657613612645
      },
      "data": {
        "id": "customFunctionAgentflow_12",
        "label": "Get End Date from Session",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_12-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_12-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_12-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "apiUrl",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.api_url\" data-label=\"$flow.state.api_url\">{{ $flow.state.api_url }}</span> </p>"
            },
            {
              "variableName": "userId",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.user_id\" data-label=\"$flow.state.user_id\">{{ $flow.state.user_id }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const fetch = require( 'node-fetch' )\n\nconst apiUrl = $apiUrl\nconst userId = $userId\n\nconst response = await fetch( `${ apiUrl }/api/session/${ userId }`, {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n} )\n\nif ( !response.ok ) {\n    return \"No\"\n}\n\nconst result = await response.json()\nreturn result.data.end_date",
          "customFunctionUpdateState": [
            {
              "key": "end_date",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output\" data-label=\"output\">{{ output }}</span> </p>"
            }
          ]
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_12-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 245,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": -2521.2115493148876,
        "y": 332.51657613612645
      },
      "dragging": false
    },
    {
      "id": "stickyNoteAgentflow_2",
      "position": {
        "x": -4845.477568173785,
        "y": -495.1752118985166
      },
      "data": {
        "id": "stickyNoteAgentflow_2",
        "label": "Sticky Note (2)",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_2-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "Sample Input (separated by |)"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_2-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 81,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": -4845.477568173785,
        "y": -495.1752118985166
      }
    },
    {
      "id": "stickyNoteAgentflow_3",
      "position": {
        "x": -4550.073422252746,
        "y": -338.62643774142293
      },
      "data": {
        "id": "stickyNoteAgentflow_3",
        "label": "Sticky Note (3)",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_3-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "thứ 5 tuần trước tôi check in lúc nào|29:1LZVQUxhyhMQA5VKBzO8OyD9wv6xrQaNNmO8nBd2BOEz4G2q6_jIBRlDoI-sLJt_uIyr-4k_xWym19eAgc5HdXQ|Nguyen Duc Kien|ndkien.ts@cmc.com.vn"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_3-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 242,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": -4550.073422252746,
        "y": -338.62643774142293
      }
    },
    {
      "id": "toolAgentflow_0",
      "position": {
        "x": 2492.7687179071036,
        "y": 396.4167911074603
      },
      "data": {
        "id": "toolAgentflow_0",
        "label": "Current Time",
        "version": 1.1,
        "name": "toolAgentflow",
        "type": "Tool",
        "color": "#d4a373",
        "baseClasses": [
          "Tool"
        ],
        "category": "Agent Flows",
        "description": "Tools allow LLM to interact with external systems",
        "inputParams": [
          {
            "label": "Tool",
            "name": "toolAgentflowSelectedTool",
            "type": "asyncOptions",
            "loadMethod": "listTools",
            "loadConfig": true,
            "id": "toolAgentflow_0-input-toolAgentflowSelectedTool-asyncOptions",
            "display": true
          },
          {
            "label": "Tool Input Arguments",
            "name": "toolInputArgs",
            "type": "array",
            "acceptVariable": true,
            "refresh": true,
            "array": [
              {
                "label": "Input Argument Name",
                "name": "inputArgName",
                "type": "asyncOptions",
                "loadMethod": "listToolInputArgs",
                "refresh": true
              },
              {
                "label": "Input Argument Value",
                "name": "inputArgValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "show": {
              "toolAgentflowSelectedTool": ".+"
            },
            "id": "toolAgentflow_0-input-toolInputArgs-array",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "toolUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "toolAgentflow_0-input-toolUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "toolAgentflowSelectedTool": "currentDateTime",
          "toolInputArgs": "",
          "toolUpdateState": "",
          "toolAgentflowSelectedToolConfig": {
            "toolAgentflowSelectedTool": "currentDateTime"
          }
        },
        "outputAnchors": [
          {
            "id": "toolAgentflow_0-output-toolAgentflow",
            "label": "Tool",
            "name": "toolAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 157,
      "height": 68,
      "selected": false,
      "positionAbsolute": {
        "x": 2492.7687179071036,
        "y": 396.4167911074603
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_14",
      "position": {
        "x": 2715.2757943492857,
        "y": 379.0367485362766
      },
      "data": {
        "id": "customFunctionAgentflow_14",
        "label": "Parse current time",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_14-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_14-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_14-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "currentTime",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"toolAgentflow_0\" data-label=\"toolAgentflow_0\">{{ toolAgentflow_0 }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "let currentTime = JSON.parse($currentTime);\n\nreturn `${ currentTime.day }, ${ currentTime.date }`",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_14-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 191,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 2715.2757943492857,
        "y": 379.0367485362766
      },
      "dragging": false
    },
    {
      "id": "stickyNoteAgentflow_1",
      "position": {
        "x": -4241.479272695424,
        "y": -336.62643774142293
      },
      "data": {
        "id": "stickyNoteAgentflow_1",
        "label": "Sticky Note (3) (1)",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_1-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "vậy còn thời gian check out thì sao|29:1LZVQUxhyhMQA5VKBzO8OyD9wv6xrQaNNmO8nBd2BOEz4G2q6_jIBRlDoI-sLJt_uIyr-4k_xWym19eAgc5HdXQ|Nguyen Duc Kien|ndkien.ts@cmc.com.vn"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_1-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 242,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": -4241.479272695424,
        "y": -336.62643774142293
      }
    },
    {
      "id": "stickyNoteAgentflow_4",
      "position": {
        "x": -3932.0179610847213,
        "y": -338.55665111529095
      },
      "data": {
        "id": "stickyNoteAgentflow_4",
        "label": "Sticky Note (3) (4)",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_4-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "thứ 6 vừa qua tôi check in lúc nào|29:1LZVQUxhyhMQA5VKBzO8OyD9wv6xrQaNNmO8nBd2BOEz4G2q6_jIBRlDoI-sLJt_uIyr-4k_xWym19eAgc5HdXQ|Nguyen Duc Kien|ndkien.ts@cmc.com.vn"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_4-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 242,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": -3932.0179610847213,
        "y": -338.55665111529095
      }
    },
    {
      "id": "stickyNoteAgentflow_5",
      "position": {
        "x": -3653.9523743519676,
        "y": -318.67096643933064
      },
      "data": {
        "id": "stickyNoteAgentflow_5",
        "label": "Sticky Note (3) (1) (5)",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_5-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "còn thời gian check out?|29:1LZVQUxhyhMQA5VKBzO8OyD9wv6xrQaNNmO8nBd2BOEz4G2q6_jIBRlDoI-sLJt_uIyr-4k_xWym19eAgc5HdXQ|Nguyen Duc Kien|ndkien.ts@cmc.com.vn"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_5-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 222,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": -3653.9523743519676,
        "y": -318.67096643933064
      }
    },
    {
      "id": "customFunctionAgentflow_15",
      "position": {
        "x": 554.6931545296313,
        "y": 618.4758881019902
      },
      "data": {
        "id": "customFunctionAgentflow_15",
        "label": "Reset Counter",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_15-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_15-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_15-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "counterQuery",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.counter_query\" data-label=\"$flow.state.counter_query\">{{ $flow.state.counter_query }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "return 0",
          "customFunctionUpdateState": [
            {
              "key": "counter_query",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output\" data-label=\"output\">{{ output }}</span> </p>"
            }
          ],
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_15-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 164,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 554.6931545296313,
        "y": 618.4758881019902
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_16",
      "position": {
        "x": 557.1073222011755,
        "y": 750.8423803643417
      },
      "data": {
        "id": "customFunctionAgentflow_16",
        "label": "Reset Counter ",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_16-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_16-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_16-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "counterQuery",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.counter_query\" data-label=\"$flow.state.counter_query\">{{ $flow.state.counter_query }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "return 0",
          "customFunctionUpdateState": [
            {
              "key": "counter_query",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output\" data-label=\"output\">{{ output }}</span> </p>"
            }
          ],
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_16-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 164,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 557.1073222011755,
        "y": 750.8423803643417
      },
      "dragging": false
    },
    {
      "id": "conditionAgentflow_3",
      "position": {
        "x": 971.5983144402617,
        "y": 598.643344460351
      },
      "data": {
        "id": "conditionAgentflow_3",
        "label": "Does Counter reach Limit?",
        "version": 1,
        "name": "conditionAgentflow",
        "type": "Condition",
        "color": "#FFB938",
        "baseClasses": [
          "Condition"
        ],
        "category": "Agent Flows",
        "description": "Split flows based on If Else conditions",
        "inputParams": [
          {
            "label": "Conditions",
            "name": "conditions",
            "type": "array",
            "description": "Values to compare",
            "acceptVariable": true,
            "default": [
              {
                "type": "string",
                "value1": "",
                "operation": "equal",
                "value2": ""
              }
            ],
            "array": [
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  }
                ],
                "default": "string"
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "string",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Contains",
                    "name": "contains"
                  },
                  {
                    "label": "Ends With",
                    "name": "endsWith"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Contains",
                    "name": "notContains"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Regex",
                    "name": "regex"
                  },
                  {
                    "label": "Starts With",
                    "name": "startsWith"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "string",
                "default": "",
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                },
                "hide": {
                  "conditions[$index].operation": [
                    "isEmpty",
                    "notEmpty"
                  ]
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "number",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Smaller",
                    "name": "smaller"
                  },
                  {
                    "label": "Smaller Equal",
                    "name": "smallerEqual"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Larger",
                    "name": "larger"
                  },
                  {
                    "label": "Larger Equal",
                    "name": "largerEqual"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "number",
                "default": 0,
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "boolean",
                "default": false,
                "description": "First value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "boolean",
                "default": false,
                "description": "Second value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              }
            ],
            "id": "conditionAgentflow_3-input-conditions-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "conditions": [
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.counter_query\" data-label=\"$flow.state.counter_query\">{{ $flow.state.counter_query }}</span> </p>",
              "operation": "equal",
              "value2": "<p>2</p>"
            }
          ],
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "conditionAgentflow_3-output-0",
            "label": "Condition",
            "name": "conditionAgentflow"
          },
          {
            "id": "conditionAgentflow_3-output-1",
            "label": "Condition",
            "name": "conditionAgentflow"
          }
        ],
        "outputs": {
          "conditionAgentflow": ""
        },
        "selected": false
      },
      "type": "agentFlow",
      "width": 243,
      "height": 80,
      "selected": false,
      "positionAbsolute": {
        "x": 971.5983144402617,
        "y": 598.643344460351
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_17",
      "position": {
        "x": 2720.4986648649547,
        "y": 573.7740526318306
      },
      "data": {
        "id": "customFunctionAgentflow_17",
        "label": "Parse current time",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_17-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_17-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_17-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "currentTime",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"toolAgentflow_1\" data-label=\"toolAgentflow_1\">{{ toolAgentflow_1 }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "let currentTime = JSON.parse($currentTime);\n\nreturn `${ currentTime.day }, ${ currentTime.date }`",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_17-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 191,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 2720.4986648649547,
        "y": 573.7740526318306
      },
      "dragging": false
    },
    {
      "id": "toolAgentflow_1",
      "position": {
        "x": 2484.8528421083897,
        "y": 608.8480903073449
      },
      "data": {
        "id": "toolAgentflow_1",
        "label": "Current Time",
        "version": 1.1,
        "name": "toolAgentflow",
        "type": "Tool",
        "color": "#d4a373",
        "baseClasses": [
          "Tool"
        ],
        "category": "Agent Flows",
        "description": "Tools allow LLM to interact with external systems",
        "inputParams": [
          {
            "label": "Tool",
            "name": "toolAgentflowSelectedTool",
            "type": "asyncOptions",
            "loadMethod": "listTools",
            "loadConfig": true,
            "id": "toolAgentflow_1-input-toolAgentflowSelectedTool-asyncOptions",
            "display": true
          },
          {
            "label": "Tool Input Arguments",
            "name": "toolInputArgs",
            "type": "array",
            "acceptVariable": true,
            "refresh": true,
            "array": [
              {
                "label": "Input Argument Name",
                "name": "inputArgName",
                "type": "asyncOptions",
                "loadMethod": "listToolInputArgs",
                "refresh": true
              },
              {
                "label": "Input Argument Value",
                "name": "inputArgValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "show": {
              "toolAgentflowSelectedTool": ".+"
            },
            "id": "toolAgentflow_1-input-toolInputArgs-array",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "toolUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "toolAgentflow_1-input-toolUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "toolAgentflowSelectedTool": "currentDateTime",
          "toolInputArgs": "",
          "toolUpdateState": "",
          "toolAgentflowSelectedToolConfig": {
            "toolAgentflowSelectedTool": "currentDateTime"
          }
        },
        "outputAnchors": [
          {
            "id": "toolAgentflow_1-output-toolAgentflow",
            "label": "Tool",
            "name": "toolAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 157,
      "height": 68,
      "selected": false,
      "positionAbsolute": {
        "x": 2484.8528421083897,
        "y": 608.8480903073449
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_18",
      "position": {
        "x": 1491.5772025434742,
        "y": 604.7208304174131
      },
      "data": {
        "id": "customFunctionAgentflow_18",
        "label": "Update Counter",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_18-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_18-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_18-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "queryCounter",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.counter_query\" data-label=\"$flow.state.counter_query\">{{ $flow.state.counter_query }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "let counter = parseInt( $queryCounter, 10 ) \n\nreturn counter+=1",
          "customFunctionUpdateState": [
            {
              "key": "counter_query",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output\" data-label=\"output\">{{ output }}</span> </p>"
            }
          ]
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_18-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 174,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 1491.5772025434742,
        "y": 604.7208304174131
      },
      "dragging": false
    },
    {
      "id": "directReplyAgentflow_4",
      "position": {
        "x": 1288.5283496690897,
        "y": 523.9935271934226
      },
      "data": {
        "id": "directReplyAgentflow_4",
        "label": "API Server Error",
        "version": 1,
        "name": "directReplyAgentflow",
        "type": "DirectReply",
        "color": "#4DDBBB",
        "hideOutput": true,
        "baseClasses": [
          "DirectReply"
        ],
        "category": "Agent Flows",
        "description": "Directly reply to the user with a message",
        "inputParams": [
          {
            "label": "Message",
            "name": "directReplyMessage",
            "type": "string",
            "rows": 4,
            "acceptVariable": true,
            "id": "directReplyAgentflow_4-input-directReplyMessage-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "directReplyMessage": "<p>Dạ, em xin lỗi, hệ thống bên em đang gặp một số lỗi kỹ thuật. Anh/chị vui lòng thử lại sau ạ.</p>"
        },
        "outputAnchors": [],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 176,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 1288.5283496690897,
        "y": 523.9935271934226
      },
      "dragging": false
    },
    {
      "id": "stickyNoteAgentflow_6",
      "position": {
        "x": -4845.076975725184,
        "y": 192.0457970630223
      },
      "data": {
        "id": "stickyNoteAgentflow_6",
        "label": "Sticky Note (3) (1) (5) (6)",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_6-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "thứ 3 vừa qua tôi có đi muộn không|29:1LZVQUxhyhMQA5VKBzO8OyD9wv6xrQaNNmO8nBd2BOEz4G2q6_jIBRlDoI-sLJt_uIyr-4k_xWym19eAgc5HdXQ|Nguyen Duc Kien|ndkien.ts@cmc.com.vn"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_6-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 242,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": -4845.076975725184,
        "y": 192.0457970630223
      }
    },
    {
      "id": "conditionAgentflow_4",
      "position": {
        "x": 981.4236256321608,
        "y": 773.2885269851711
      },
      "data": {
        "id": "conditionAgentflow_4",
        "label": "Does Counter reach Limit?",
        "version": 1,
        "name": "conditionAgentflow",
        "type": "Condition",
        "color": "#FFB938",
        "baseClasses": [
          "Condition"
        ],
        "category": "Agent Flows",
        "description": "Split flows based on If Else conditions",
        "inputParams": [
          {
            "label": "Conditions",
            "name": "conditions",
            "type": "array",
            "description": "Values to compare",
            "acceptVariable": true,
            "default": [
              {
                "type": "string",
                "value1": "",
                "operation": "equal",
                "value2": ""
              }
            ],
            "array": [
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  }
                ],
                "default": "string"
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "string",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Contains",
                    "name": "contains"
                  },
                  {
                    "label": "Ends With",
                    "name": "endsWith"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Contains",
                    "name": "notContains"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Regex",
                    "name": "regex"
                  },
                  {
                    "label": "Starts With",
                    "name": "startsWith"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "string",
                "default": "",
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                },
                "hide": {
                  "conditions[$index].operation": [
                    "isEmpty",
                    "notEmpty"
                  ]
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "number",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Smaller",
                    "name": "smaller"
                  },
                  {
                    "label": "Smaller Equal",
                    "name": "smallerEqual"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Larger",
                    "name": "larger"
                  },
                  {
                    "label": "Larger Equal",
                    "name": "largerEqual"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "number",
                "default": 0,
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "boolean",
                "default": false,
                "description": "First value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "boolean",
                "default": false,
                "description": "Second value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              }
            ],
            "id": "conditionAgentflow_4-input-conditions-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "conditions": [
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.counter_query\" data-label=\"$flow.state.counter_query\">{{ $flow.state.counter_query }}</span> </p>",
              "operation": "equal",
              "value2": "<p>2</p>"
            }
          ],
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "conditionAgentflow_4-output-0",
            "label": "Condition",
            "name": "conditionAgentflow"
          },
          {
            "id": "conditionAgentflow_4-output-1",
            "label": "Condition",
            "name": "conditionAgentflow"
          }
        ],
        "outputs": {
          "conditionAgentflow": ""
        },
        "selected": false
      },
      "type": "agentFlow",
      "width": 243,
      "height": 80,
      "selected": false,
      "positionAbsolute": {
        "x": 981.4236256321608,
        "y": 773.2885269851711
      },
      "dragging": false
    },
    {
      "id": "directReplyAgentflow_7",
      "position": {
        "x": 1291.2320091552128,
        "y": 747.2898677072995
      },
      "data": {
        "id": "directReplyAgentflow_7",
        "label": "API Server Error",
        "version": 1,
        "name": "directReplyAgentflow",
        "type": "DirectReply",
        "color": "#4DDBBB",
        "hideOutput": true,
        "baseClasses": [
          "DirectReply"
        ],
        "category": "Agent Flows",
        "description": "Directly reply to the user with a message",
        "inputParams": [
          {
            "label": "Message",
            "name": "directReplyMessage",
            "type": "string",
            "rows": 4,
            "acceptVariable": true,
            "id": "directReplyAgentflow_7-input-directReplyMessage-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "directReplyMessage": "<p>Dạ, em xin lỗi, hệ thống bên em đang gặp một số lỗi kỹ thuật. Anh/chị vui lòng thử lại sau ạ.</p>"
        },
        "outputAnchors": [],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 176,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 1291.2320091552128,
        "y": 747.2898677072995
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_19",
      "position": {
        "x": 1493.5283276190603,
        "y": 829.2646365207529
      },
      "data": {
        "id": "customFunctionAgentflow_19",
        "label": "Update Counter ",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_19-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_19-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_19-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "queryCounter",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.counter_query\" data-label=\"$flow.state.counter_query\">{{ $flow.state.counter_query }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "let counter = parseInt( $queryCounter, 10 ) \n\nreturn counter+=1",
          "customFunctionUpdateState": [
            {
              "key": "counter_query",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output\" data-label=\"output\">{{ output }}</span> </p>"
            }
          ]
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_19-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 174,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 1493.5283276190603,
        "y": 829.2646365207529
      },
      "dragging": false
    },
    {
      "id": "toolAgentflow_2",
      "position": {
        "x": 2492.2583477943094,
        "y": 889.5278479365198
      },
      "data": {
        "id": "toolAgentflow_2",
        "label": "Current Time",
        "version": 1.1,
        "name": "toolAgentflow",
        "type": "Tool",
        "color": "#d4a373",
        "baseClasses": [
          "Tool"
        ],
        "category": "Agent Flows",
        "description": "Tools allow LLM to interact with external systems",
        "inputParams": [
          {
            "label": "Tool",
            "name": "toolAgentflowSelectedTool",
            "type": "asyncOptions",
            "loadMethod": "listTools",
            "loadConfig": true,
            "id": "toolAgentflow_2-input-toolAgentflowSelectedTool-asyncOptions",
            "display": true
          },
          {
            "label": "Tool Input Arguments",
            "name": "toolInputArgs",
            "type": "array",
            "acceptVariable": true,
            "refresh": true,
            "array": [
              {
                "label": "Input Argument Name",
                "name": "inputArgName",
                "type": "asyncOptions",
                "loadMethod": "listToolInputArgs",
                "refresh": true
              },
              {
                "label": "Input Argument Value",
                "name": "inputArgValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "show": {
              "toolAgentflowSelectedTool": ".+"
            },
            "id": "toolAgentflow_2-input-toolInputArgs-array",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "toolUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "toolAgentflow_2-input-toolUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "toolAgentflowSelectedTool": "currentDateTime",
          "toolInputArgs": "",
          "toolUpdateState": "",
          "toolAgentflowSelectedToolConfig": {
            "toolAgentflowSelectedTool": "currentDateTime"
          }
        },
        "outputAnchors": [
          {
            "id": "toolAgentflow_2-output-toolAgentflow",
            "label": "Tool",
            "name": "toolAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 157,
      "height": 68,
      "selected": false,
      "positionAbsolute": {
        "x": 2492.2583477943094,
        "y": 889.5278479365198
      },
      "dragging": false
    },
    {
      "id": "customFunctionAgentflow_23",
      "position": {
        "x": 2713.2530125618177,
        "y": 898.1151058922104
      },
      "data": {
        "id": "customFunctionAgentflow_23",
        "label": "Parse current time",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_23-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_23-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_23-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "currentTime",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"toolAgentflow_2\" data-label=\"toolAgentflow_2\">{{ toolAgentflow_2 }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "let currentTime = JSON.parse($currentTime);\n\nreturn `${ currentTime.day }, ${ currentTime.date }`",
          "customFunctionUpdateState": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_23-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 191,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": 2713.2530125618177,
        "y": 898.1151058922104
      },
      "dragging": false
    },
    {
      "id": "stickyNoteAgentflow_7",
      "position": {
        "x": -4552.522262704261,
        "y": 193.72900401616073
      },
      "data": {
        "id": "stickyNoteAgentflow_7",
        "label": "Sticky Note (3) (1) (5) (6) (7)",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_7-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "thứ 3 vừa qua tôi được tính bao nhiêu ngày công|29:1LZVQUxhyhMQA5VKBzO8OyD9wv6xrQaNNmO8nBd2BOEz4G2q6_jIBRlDoI-sLJt_uIyr-4k_xWym19eAgc5HdXQ|Nguyen Duc Kien|ndkien.ts@cmc.com.vn"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_7-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 242,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": -4552.522262704261,
        "y": 193.72900401616073
      }
    },
    {
      "id": "stickyNoteAgentflow_8",
      "position": {
        "x": -4255.6443256559,
        "y": 192.04579706302235
      },
      "data": {
        "id": "stickyNoteAgentflow_8",
        "label": "Sticky Note (3) (1) (5) (6) (7) (8)",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_8-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "thứ 4 vừa rồi thì sao|29:1LZVQUxhyhMQA5VKBzO8OyD9wv6xrQaNNmO8nBd2BOEz4G2q6_jIBRlDoI-sLJt_uIyr-4k_xWym19eAgc5HdXQ|Nguyen Duc Kien|ndkien.ts@cmc.com.vn"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_8-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 222,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": -4255.6443256559,
        "y": 192.04579706302235
      }
    },
    {
      "id": "customFunctionAgentflow_24",
      "position": {
        "x": -1359.5378043952524,
        "y": 432.6544038995353
      },
      "data": {
        "id": "customFunctionAgentflow_24",
        "label": "Get Topic from Session",
        "version": 1,
        "name": "customFunctionAgentflow",
        "type": "CustomFunction",
        "color": "#E4B7FF",
        "baseClasses": [
          "CustomFunction"
        ],
        "category": "Agent Flows",
        "description": "Execute custom function",
        "inputParams": [
          {
            "label": "Input Variables",
            "name": "customFunctionInputVariables",
            "description": "Input variables can be used in the function with prefix $. For example: $foo",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Variable Name",
                "name": "variableName",
                "type": "string"
              },
              {
                "label": "Variable Value",
                "name": "variableValue",
                "type": "string",
                "acceptVariable": true
              }
            ],
            "id": "customFunctionAgentflow_24-input-customFunctionInputVariables-array",
            "display": true
          },
          {
            "label": "Javascript Function",
            "name": "customFunctionJavascriptFunction",
            "type": "code",
            "codeExample": "/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Input Schema as variables. Ex: Property = userid, Variable = $userid\n* You can get default flow config: $flow.sessionId, $flow.chatId, $flow.chatflowId, $flow.input, $flow.state\n* You can get custom variables: $vars.<variable-name>\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}",
            "description": "The function to execute. Must return a string or an object that can be converted to a string.",
            "id": "customFunctionAgentflow_24-input-customFunctionJavascriptFunction-code",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "customFunctionUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "customFunctionAgentflow_24-input-customFunctionUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "customFunctionInputVariables": [
            {
              "variableName": "apiUrl",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.api_url\" data-label=\"$flow.state.api_url\">{{ $flow.state.api_url }}</span> </p>"
            },
            {
              "variableName": "userId",
              "variableValue": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.user_id\" data-label=\"$flow.state.user_id\">{{ $flow.state.user_id }}</span> </p>"
            }
          ],
          "customFunctionJavascriptFunction": "const fetch = require( 'node-fetch' )\n\nconst apiUrl = $apiUrl\nconst userId = $userId\n\nconst response = await fetch( `${ apiUrl }/api/session/${ userId }`, {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n} )\n\nif ( !response.ok ) {\n    return \"No\"\n}\n\nconst result = await response.json()\nreturn result.data.topic",
          "customFunctionUpdateState": [
            {
              "key": "topic",
              "value": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"output\" data-label=\"output\">{{ output }}</span> </p>"
            }
          ],
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "customFunctionAgentflow_24-output-customFunctionAgentflow",
            "label": "Custom Function",
            "name": "customFunctionAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 222,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": -1359.5378043952524,
        "y": 432.6544038995353
      },
      "dragging": false
    },
    {
      "id": "executeFlowAgentflow_1",
      "position": {
        "x": -1968.3123337785446,
        "y": 318.8470477923478
      },
      "data": {
        "id": "executeFlowAgentflow_1",
        "label": "Create topic context object",
        "version": 1,
        "name": "executeFlowAgentflow",
        "type": "ExecuteFlow",
        "color": "#a3b18a",
        "baseClasses": [
          "ExecuteFlow"
        ],
        "category": "Agent Flows",
        "description": "Execute another flow",
        "inputParams": [
          {
            "label": "Connect Credential",
            "name": "credential",
            "type": "credential",
            "credentialNames": [
              "chatflowApi"
            ],
            "optional": true,
            "id": "executeFlowAgentflow_1-input-credential-credential",
            "display": true
          },
          {
            "label": "Select Flow",
            "name": "executeFlowSelectedFlow",
            "type": "asyncOptions",
            "loadMethod": "listFlows",
            "id": "executeFlowAgentflow_1-input-executeFlowSelectedFlow-asyncOptions",
            "display": true
          },
          {
            "label": "Input",
            "name": "executeFlowInput",
            "type": "string",
            "rows": 4,
            "acceptVariable": true,
            "id": "executeFlowAgentflow_1-input-executeFlowInput-string",
            "display": true
          },
          {
            "label": "Override Config",
            "name": "executeFlowOverrideConfig",
            "description": "Override the config passed to the flow",
            "type": "json",
            "optional": true,
            "id": "executeFlowAgentflow_1-input-executeFlowOverrideConfig-json",
            "display": true
          },
          {
            "label": "Base URL",
            "name": "executeFlowBaseURL",
            "type": "string",
            "description": "Base URL to Flowise. By default, it is the URL of the incoming request. Useful when you need to execute flow through an alternative route.",
            "placeholder": "http://localhost:3000",
            "optional": true,
            "id": "executeFlowAgentflow_1-input-executeFlowBaseURL-string",
            "display": true
          },
          {
            "label": "Return Response As",
            "name": "executeFlowReturnResponseAs",
            "type": "options",
            "options": [
              {
                "label": "User Message",
                "name": "userMessage"
              },
              {
                "label": "Assistant Message",
                "name": "assistantMessage"
              }
            ],
            "default": "userMessage",
            "id": "executeFlowAgentflow_1-input-executeFlowReturnResponseAs-options",
            "display": true
          },
          {
            "label": "Update Flow State",
            "name": "executeFlowUpdateState",
            "description": "Update runtime state during the execution of the workflow",
            "type": "array",
            "optional": true,
            "acceptVariable": true,
            "array": [
              {
                "label": "Key",
                "name": "key",
                "type": "asyncOptions",
                "loadMethod": "listRuntimeStateKeys",
                "freeSolo": true
              },
              {
                "label": "Value",
                "name": "value",
                "type": "string",
                "acceptVariable": true,
                "acceptNodeOutputAsVariable": true
              }
            ],
            "id": "executeFlowAgentflow_1-input-executeFlowUpdateState-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "executeFlowSelectedFlow": "a8114297-b1bd-4136-8d80-5350ab72d54f",
          "executeFlowInput": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.user_id\" data-label=\"$flow.state.user_id\">{{ $flow.state.user_id }}</span>|<span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.user_question\" data-label=\"$flow.state.user_question\">{{ $flow.state.user_question }}</span></p>",
          "executeFlowOverrideConfig": "",
          "executeFlowBaseURL": "",
          "executeFlowReturnResponseAs": "assistantMessage",
          "executeFlowUpdateState": "",
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "executeFlowAgentflow_1-output-executeFlowAgentflow",
            "label": "Execute Flow",
            "name": "executeFlowAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 247,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": -1968.3123337785446,
        "y": 318.8470477923478
      },
      "dragging": false
    },
    {
      "id": "conditionAgentflow_6",
      "position": {
        "x": -1643.0812267532533,
        "y": 361.4572280079851
      },
      "data": {
        "id": "conditionAgentflow_6",
        "label": "Is topic identifiable?",
        "version": 1,
        "name": "conditionAgentflow",
        "type": "Condition",
        "color": "#FFB938",
        "baseClasses": [
          "Condition"
        ],
        "category": "Agent Flows",
        "description": "Split flows based on If Else conditions",
        "inputParams": [
          {
            "label": "Conditions",
            "name": "conditions",
            "type": "array",
            "description": "Values to compare",
            "acceptVariable": true,
            "default": [
              {
                "type": "string",
                "value1": "",
                "operation": "equal",
                "value2": ""
              }
            ],
            "array": [
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  }
                ],
                "default": "string"
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "string",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Contains",
                    "name": "contains"
                  },
                  {
                    "label": "Ends With",
                    "name": "endsWith"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Contains",
                    "name": "notContains"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Regex",
                    "name": "regex"
                  },
                  {
                    "label": "Starts With",
                    "name": "startsWith"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "string",
                "default": "",
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                },
                "hide": {
                  "conditions[$index].operation": [
                    "isEmpty",
                    "notEmpty"
                  ]
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "number",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Smaller",
                    "name": "smaller"
                  },
                  {
                    "label": "Smaller Equal",
                    "name": "smallerEqual"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Larger",
                    "name": "larger"
                  },
                  {
                    "label": "Larger Equal",
                    "name": "largerEqual"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "number",
                "default": 0,
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "boolean",
                "default": false,
                "description": "First value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "boolean",
                "default": false,
                "description": "Second value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              }
            ],
            "id": "conditionAgentflow_6-input-conditions-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "conditions": [
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"executeFlowAgentflow_1\" data-label=\"executeFlowAgentflow_1\">{{ executeFlowAgentflow_1 }}</span> </p>",
              "operation": "equal",
              "value2": "<p>No</p>"
            }
          ]
        },
        "outputAnchors": [
          {
            "id": "conditionAgentflow_6-output-0",
            "label": "Condition",
            "name": "conditionAgentflow"
          },
          {
            "id": "conditionAgentflow_6-output-1",
            "label": "Condition",
            "name": "conditionAgentflow"
          }
        ],
        "outputs": {
          "conditionAgentflow": ""
        },
        "selected": false
      },
      "type": "agentFlow",
      "width": 202,
      "height": 80,
      "selected": false,
      "positionAbsolute": {
        "x": -1643.0812267532533,
        "y": 361.4572280079851
      },
      "dragging": false
    },
    {
      "id": "directReplyAgentflow_8",
      "position": {
        "x": -1357.6342821270075,
        "y": 320.856992652831
      },
      "data": {
        "id": "directReplyAgentflow_8",
        "label": "Topic is unidentifiable",
        "version": 1,
        "name": "directReplyAgentflow",
        "type": "DirectReply",
        "color": "#4DDBBB",
        "hideOutput": true,
        "baseClasses": [
          "DirectReply"
        ],
        "category": "Agent Flows",
        "description": "Directly reply to the user with a message",
        "inputParams": [
          {
            "label": "Message",
            "name": "directReplyMessage",
            "type": "string",
            "rows": 4,
            "acceptVariable": true,
            "id": "directReplyAgentflow_8-input-directReplyMessage-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "directReplyMessage": "<p>Dạ, anh/chị vui lòng cho em biết thêm thông tin cụ thể ạ. Anh/chị muốn tra cứu <strong>thời gian check in/out, số ngày công, hay thông tin đi muộn</strong>, để em hỗ trợ chính xác hơn ạ.</p>"
        },
        "outputAnchors": [],
        "outputs": {},
        "selected": false
      },
      "type": "agentFlow",
      "width": 214,
      "height": 65,
      "selected": false,
      "positionAbsolute": {
        "x": -1357.6342821270075,
        "y": 320.856992652831
      },
      "dragging": false
    },
    {
      "id": "conditionAgentflow_7",
      "position": {
        "x": 241.74936166097925,
        "y": 541.7728928392797
      },
      "data": {
        "id": "conditionAgentflow_7",
        "label": "What is the topic?",
        "version": 1,
        "name": "conditionAgentflow",
        "type": "Condition",
        "color": "#FFB938",
        "baseClasses": [
          "Condition"
        ],
        "category": "Agent Flows",
        "description": "Split flows based on If Else conditions",
        "inputParams": [
          {
            "label": "Conditions",
            "name": "conditions",
            "type": "array",
            "description": "Values to compare",
            "acceptVariable": true,
            "default": [
              {
                "type": "string",
                "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.topic\" data-label=\"$flow.state.topic\">{{ $flow.state.topic }}</span> </p>",
                "operation": "equal",
                "value2": "<p>Thời gian Check-in / Check-out cụ thể</p>"
              }
            ],
            "array": [
              {
                "label": "Type",
                "name": "type",
                "type": "options",
                "options": [
                  {
                    "label": "String",
                    "name": "string"
                  },
                  {
                    "label": "Number",
                    "name": "number"
                  },
                  {
                    "label": "Boolean",
                    "name": "boolean"
                  }
                ],
                "default": "string"
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "string",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Contains",
                    "name": "contains"
                  },
                  {
                    "label": "Ends With",
                    "name": "endsWith"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Contains",
                    "name": "notContains"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Regex",
                    "name": "regex"
                  },
                  {
                    "label": "Starts With",
                    "name": "startsWith"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "string"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "string",
                "default": "",
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "string"
                },
                "hide": {
                  "conditions[$index].operation": [
                    "isEmpty",
                    "notEmpty"
                  ]
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "number",
                "default": "",
                "description": "First value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Smaller",
                    "name": "smaller"
                  },
                  {
                    "label": "Smaller Equal",
                    "name": "smallerEqual"
                  },
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  },
                  {
                    "label": "Larger",
                    "name": "larger"
                  },
                  {
                    "label": "Larger Equal",
                    "name": "largerEqual"
                  },
                  {
                    "label": "Is Empty",
                    "name": "isEmpty"
                  },
                  {
                    "label": "Not Empty",
                    "name": "notEmpty"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "number",
                "default": 0,
                "description": "Second value to be compared with",
                "acceptVariable": true,
                "show": {
                  "conditions[$index].type": "number"
                }
              },
              {
                "label": "Value 1",
                "name": "value1",
                "type": "boolean",
                "default": false,
                "description": "First value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Operation",
                "name": "operation",
                "type": "options",
                "options": [
                  {
                    "label": "Equal",
                    "name": "equal"
                  },
                  {
                    "label": "Not Equal",
                    "name": "notEqual"
                  }
                ],
                "default": "equal",
                "description": "Type of operation",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              },
              {
                "label": "Value 2",
                "name": "value2",
                "type": "boolean",
                "default": false,
                "description": "Second value to be compared with",
                "show": {
                  "conditions[$index].type": "boolean"
                }
              }
            ],
            "id": "conditionAgentflow_7-input-conditions-array",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "conditions": [
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.topic\" data-label=\"$flow.state.topic\">{{ $flow.state.topic }}</span> </p>",
              "operation": "equal",
              "value2": "<p>Thời gian Check-in / Check-out cụ thể</p>"
            },
            {
              "type": "string",
              "value1": "<p><span class=\"variable\" data-type=\"mention\" data-id=\"$flow.state.topic\" data-label=\"$flow.state.topic\">{{ $flow.state.topic }}</span> </p>",
              "operation": "equal",
              "value2": "<p>Đi muộn</p>"
            }
          ],
          "undefined": ""
        },
        "outputAnchors": [
          {
            "id": "conditionAgentflow_7-output-0",
            "label": 0,
            "name": 0,
            "description": "Condition 0"
          },
          {
            "id": "conditionAgentflow_7-output-1",
            "label": 1,
            "name": 1,
            "description": "Condition 1"
          },
          {
            "id": "conditionAgentflow_7-output-2",
            "label": 2,
            "name": 2,
            "description": "Else"
          }
        ],
        "outputs": {
          "conditionAgentflow": ""
        },
        "selected": false
      },
      "type": "agentFlow",
      "width": 188,
      "height": 100,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": 241.74936166097925,
        "y": 541.7728928392797
      }
    },
    {
      "id": "stickyNoteAgentflow_10",
      "position": {
        "x": -4553.593048218799,
        "y": -616.1293592312525
      },
      "data": {
        "id": "stickyNoteAgentflow_10",
        "label": "Sticky Note (3) (10)",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_10-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "thời gian check in của tôi hôm thứ 3 tuần trước nữa|29:1LZVQUxhyhMQA5VKBzO8OyD9wv6xrQaNNmO8nBd2BOEz4G2q6_jIBRlDoI-sLJt_uIyr-4k_xWym19eAgc5HdXQ|Nguyen Duc Kien|ndkien.ts@cmc.com.vn"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_10-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 242,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": -4553.593048218799,
        "y": -616.1293592312525
      }
    },
    {
      "id": "stickyNoteAgentflow_11",
      "position": {
        "x": -3985.6443256558996,
        "y": 190.68448293091558
      },
      "data": {
        "id": "stickyNoteAgentflow_11",
        "label": "Sticky Note (3) (1) (5) (6) (7) (8) (11)",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_11-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "thứ 5 vừa qua thì sao|29:1LZVQUxhyhMQA5VKBzO8OyD9wv6xrQaNNmO8nBd2BOEz4G2q6_jIBRlDoI-sLJt_uIyr-4k_xWym19eAgc5HdXQ|Nguyen Duc Kien|ndkien.ts@cmc.com.vn"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_11-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 222,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": -3985.6443256558996,
        "y": 190.68448293091558
      }
    },
    {
      "id": "stickyNoteAgentflow_9",
      "position": {
        "x": -5128.609540316179,
        "y": 192.0457970630223
      },
      "data": {
        "id": "stickyNoteAgentflow_9",
        "label": "Sticky Note (3) (1) (5) (6) (9)",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_9-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "hôm đó tôi có đi muộn không|29:1LZVQUxhyhMQA5VKBzO8OyD9wv6xrQaNNmO8nBd2BOEz4G2q6_jIBRlDoI-sLJt_uIyr-4k_xWym19eAgc5HdXQ|Nguyen Duc Kien|ndkien.ts@cmc.com.vn"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_9-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 222,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": -5128.609540316179,
        "y": 192.0457970630223
      }
    },
    {
      "id": "stickyNoteAgentflow_12",
      "position": {
        "x": -4561.937088782401,
        "y": 477.692443542084
      },
      "data": {
        "id": "stickyNoteAgentflow_12",
        "label": "Sticky Note (3) (1) (5) (6) (7) (12)",
        "version": 1,
        "name": "stickyNoteAgentflow",
        "type": "StickyNote",
        "color": "#fee440",
        "baseClasses": [
          "StickyNote"
        ],
        "category": "Agent Flows",
        "description": "Add notes to the agent flow",
        "inputParams": [
          {
            "label": "",
            "name": "note",
            "type": "string",
            "rows": 1,
            "placeholder": "Type something here",
            "optional": true,
            "id": "stickyNoteAgentflow_12-input-note-string",
            "display": true
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "note": "thời gian check in, out của tôi?|29:1LZVQUxhyhMQA5VKBzO8OyD9wv6xrQaNNmO8nBd2BOEz4G2q6_jIBRlDoI-sLJt_uIyr-4k_xWym19eAgc5HdXQ|Nguyen Duc Kien|ndkien.ts@cmc.com.vn"
        },
        "outputAnchors": [
          {
            "id": "stickyNoteAgentflow_12-output-stickyNoteAgentflow",
            "label": "Sticky Note",
            "name": "stickyNoteAgentflow"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "type": "stickyNote",
      "width": 220,
      "height": 242,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": -4561.937088782401,
        "y": 477.692443542084
      }
    }
  ],
  "edges": [
    {
      "source": "conditionAgentAgentflow_0",
      "sourceHandle": "conditionAgentAgentflow_0-output-1",
      "target": "directReplyAgentflow_0",
      "targetHandle": "directReplyAgentflow_0",
      "data": {
        "sourceColor": "#ff8fab",
        "targetColor": "#4DDBBB",
        "edgeLabel": "1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentAgentflow_0-conditionAgentAgentflow_0-output-1-directReplyAgentflow_0-directReplyAgentflow_0"
    },
    {
      "source": "conditionAgentAgentflow_0",
      "sourceHandle": "conditionAgentAgentflow_0-output-0",
      "target": "llmAgentflow_0",
      "targetHandle": "llmAgentflow_0",
      "data": {
        "sourceColor": "#ff8fab",
        "targetColor": "#64B5F6",
        "edgeLabel": "0",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentAgentflow_0-conditionAgentAgentflow_0-output-0-llmAgentflow_0-llmAgentflow_0"
    },
    {
      "source": "conditionAgentAgentflow_0",
      "sourceHandle": "conditionAgentAgentflow_0-output-2",
      "target": "conditionAgentAgentflow_1",
      "targetHandle": "conditionAgentAgentflow_1",
      "data": {
        "sourceColor": "#ff8fab",
        "targetColor": "#ff8fab",
        "edgeLabel": "2",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentAgentflow_0-conditionAgentAgentflow_0-output-2-conditionAgentAgentflow_1-conditionAgentAgentflow_1"
    },
    {
      "source": "conditionAgentflow_1",
      "sourceHandle": "conditionAgentflow_1-output-0",
      "target": "loopAgentflow_0",
      "targetHandle": "loopAgentflow_0",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#FFA07A",
        "edgeLabel": "0",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_1-conditionAgentflow_1-output-0-loopAgentflow_0-loopAgentflow_0"
    },
    {
      "source": "conditionAgentflow_1",
      "sourceHandle": "conditionAgentflow_1-output-1",
      "target": "customFunctionAgentflow_7",
      "targetHandle": "customFunctionAgentflow_7",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#E4B7FF",
        "edgeLabel": "1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_1-conditionAgentflow_1-output-1-customFunctionAgentflow_7-customFunctionAgentflow_7"
    },
    {
      "source": "customFunctionAgentflow_7",
      "sourceHandle": "customFunctionAgentflow_7-output-customFunctionAgentflow",
      "target": "conditionAgentflow_5",
      "targetHandle": "conditionAgentflow_5",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFB938",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_7-customFunctionAgentflow_7-output-customFunctionAgentflow-conditionAgentflow_5-conditionAgentflow_5"
    },
    {
      "source": "conditionAgentflow_5",
      "sourceHandle": "conditionAgentflow_5-output-0",
      "target": "directReplyAgentflow_5",
      "targetHandle": "directReplyAgentflow_5",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DDBBB",
        "edgeLabel": "0",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_5-conditionAgentflow_5-output-0-directReplyAgentflow_5-directReplyAgentflow_5"
    },
    {
      "source": "conditionAgentAgentflow_1",
      "sourceHandle": "conditionAgentAgentflow_1-output-0",
      "target": "directReplyAgentflow_1",
      "targetHandle": "directReplyAgentflow_1",
      "data": {
        "sourceColor": "#ff8fab",
        "targetColor": "#4DDBBB",
        "edgeLabel": "0",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentAgentflow_1-conditionAgentAgentflow_1-output-0-directReplyAgentflow_1-directReplyAgentflow_1"
    },
    {
      "source": "conditionAgentflow_12",
      "sourceHandle": "conditionAgentflow_12-output-0",
      "target": "loopAgentflow_6",
      "targetHandle": "loopAgentflow_6",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#FFA07A",
        "edgeLabel": "0",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_12-conditionAgentflow_12-output-0-loopAgentflow_6-loopAgentflow_6"
    },
    {
      "source": "conditionAgentflow_12",
      "sourceHandle": "conditionAgentflow_12-output-1",
      "target": "customFunctionAgentflow_22",
      "targetHandle": "customFunctionAgentflow_22",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#E4B7FF",
        "edgeLabel": "1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_12-conditionAgentflow_12-output-1-customFunctionAgentflow_22-customFunctionAgentflow_22"
    },
    {
      "source": "customFunctionAgentflow_22",
      "sourceHandle": "customFunctionAgentflow_22-output-customFunctionAgentflow",
      "target": "conditionAgentflow_13",
      "targetHandle": "conditionAgentflow_13",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFB938",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_22-customFunctionAgentflow_22-output-customFunctionAgentflow-conditionAgentflow_13-conditionAgentflow_13"
    },
    {
      "source": "conditionAgentflow_13",
      "sourceHandle": "conditionAgentflow_13-output-0",
      "target": "directReplyAgentflow_2",
      "targetHandle": "directReplyAgentflow_2",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DDBBB",
        "edgeLabel": "0",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_13-conditionAgentflow_13-output-0-directReplyAgentflow_2-directReplyAgentflow_2"
    },
    {
      "source": "conditionAgentflow_18",
      "sourceHandle": "conditionAgentflow_18-output-1",
      "target": "customFunctionAgentflow_32",
      "targetHandle": "customFunctionAgentflow_32",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#E4B7FF",
        "edgeLabel": "1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_18-conditionAgentflow_18-output-1-customFunctionAgentflow_32-customFunctionAgentflow_32"
    },
    {
      "source": "conditionAgentflow_18",
      "sourceHandle": "conditionAgentflow_18-output-0",
      "target": "loopAgentflow_9",
      "targetHandle": "loopAgentflow_9",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#FFA07A",
        "edgeLabel": "0",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_18-conditionAgentflow_18-output-0-loopAgentflow_9-loopAgentflow_9"
    },
    {
      "source": "customFunctionAgentflow_32",
      "sourceHandle": "customFunctionAgentflow_32-output-customFunctionAgentflow",
      "target": "conditionAgentflow_19",
      "targetHandle": "conditionAgentflow_19",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFB938",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_32-customFunctionAgentflow_32-output-customFunctionAgentflow-conditionAgentflow_19-conditionAgentflow_19"
    },
    {
      "source": "conditionAgentflow_19",
      "sourceHandle": "conditionAgentflow_19-output-0",
      "target": "directReplyAgentflow_9",
      "targetHandle": "directReplyAgentflow_9",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DDBBB",
        "edgeLabel": "0",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_19-conditionAgentflow_19-output-0-directReplyAgentflow_9-directReplyAgentflow_9"
    },
    {
      "source": "conditionAgentflow_0",
      "sourceHandle": "conditionAgentflow_0-output-0",
      "target": "directReplyAgentflow_3",
      "targetHandle": "directReplyAgentflow_3",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DDBBB",
        "edgeLabel": "0",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_0-conditionAgentflow_0-output-0-directReplyAgentflow_3-directReplyAgentflow_3"
    },
    {
      "source": "conditionAgentflow_0",
      "sourceHandle": "conditionAgentflow_0-output-1",
      "target": "customFunctionAgentflow_5",
      "targetHandle": "customFunctionAgentflow_5",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#E4B7FF",
        "edgeLabel": "1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_0-conditionAgentflow_0-output-1-customFunctionAgentflow_5-customFunctionAgentflow_5"
    },
    {
      "source": "customFunctionAgentflow_0",
      "sourceHandle": "customFunctionAgentflow_0-output-customFunctionAgentflow",
      "target": "customFunctionAgentflow_3",
      "targetHandle": "customFunctionAgentflow_3",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_0-customFunctionAgentflow_0-output-customFunctionAgentflow-customFunctionAgentflow_3-customFunctionAgentflow_3"
    },
    {
      "source": "customFunctionAgentflow_3",
      "sourceHandle": "customFunctionAgentflow_3-output-customFunctionAgentflow",
      "target": "conditionAgentflow_0",
      "targetHandle": "conditionAgentflow_0",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFB938",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_3-customFunctionAgentflow_3-output-customFunctionAgentflow-conditionAgentflow_0-conditionAgentflow_0"
    },
    {
      "source": "customFunctionAgentflow_5",
      "sourceHandle": "customFunctionAgentflow_5-output-customFunctionAgentflow",
      "target": "customFunctionAgentflow_1",
      "targetHandle": "customFunctionAgentflow_1",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_5-customFunctionAgentflow_5-output-customFunctionAgentflow-customFunctionAgentflow_1-customFunctionAgentflow_1"
    },
    {
      "source": "customFunctionAgentflow_1",
      "sourceHandle": "customFunctionAgentflow_1-output-customFunctionAgentflow",
      "target": "conditionAgentflow_1",
      "targetHandle": "conditionAgentflow_1",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFB938",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_1-customFunctionAgentflow_1-output-customFunctionAgentflow-conditionAgentflow_1-conditionAgentflow_1"
    },
    {
      "source": "conditionAgentflow_2",
      "sourceHandle": "conditionAgentflow_2-output-0",
      "target": "directReplyAgentflow_6",
      "targetHandle": "directReplyAgentflow_6",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DDBBB",
        "edgeLabel": "0",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_2-conditionAgentflow_2-output-0-directReplyAgentflow_6-directReplyAgentflow_6"
    },
    {
      "source": "customFunctionAgentflow_6",
      "sourceHandle": "customFunctionAgentflow_6-output-customFunctionAgentflow",
      "target": "customFunctionAgentflow_8",
      "targetHandle": "customFunctionAgentflow_8",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_6-customFunctionAgentflow_6-output-customFunctionAgentflow-customFunctionAgentflow_8-customFunctionAgentflow_8"
    },
    {
      "source": "customFunctionAgentflow_8",
      "sourceHandle": "customFunctionAgentflow_8-output-customFunctionAgentflow",
      "target": "conditionAgentAgentflow_0",
      "targetHandle": "conditionAgentAgentflow_0",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#ff8fab",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_8-customFunctionAgentflow_8-output-customFunctionAgentflow-conditionAgentAgentflow_0-conditionAgentAgentflow_0"
    },
    {
      "source": "startAgentflow_0",
      "sourceHandle": "startAgentflow_0-output-startAgentflow",
      "target": "customFunctionAgentflow_10",
      "targetHandle": "customFunctionAgentflow_10",
      "data": {
        "sourceColor": "#7EE787",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "startAgentflow_0-startAgentflow_0-output-startAgentflow-customFunctionAgentflow_10-customFunctionAgentflow_10"
    },
    {
      "source": "customFunctionAgentflow_10",
      "sourceHandle": "customFunctionAgentflow_10-output-customFunctionAgentflow",
      "target": "customFunctionAgentflow_9",
      "targetHandle": "customFunctionAgentflow_9",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_10-customFunctionAgentflow_10-output-customFunctionAgentflow-customFunctionAgentflow_9-customFunctionAgentflow_9"
    },
    {
      "source": "customFunctionAgentflow_9",
      "sourceHandle": "customFunctionAgentflow_9-output-customFunctionAgentflow",
      "target": "customFunctionAgentflow_6",
      "targetHandle": "customFunctionAgentflow_6",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_9-customFunctionAgentflow_9-output-customFunctionAgentflow-customFunctionAgentflow_6-customFunctionAgentflow_6"
    },
    {
      "source": "customFunctionAgentflow_11",
      "sourceHandle": "customFunctionAgentflow_11-output-customFunctionAgentflow",
      "target": "customFunctionAgentflow_12",
      "targetHandle": "customFunctionAgentflow_12",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_11-customFunctionAgentflow_11-output-customFunctionAgentflow-customFunctionAgentflow_12-customFunctionAgentflow_12"
    },
    {
      "source": "conditionAgentflow_5",
      "sourceHandle": "conditionAgentflow_5-output-1",
      "target": "toolAgentflow_0",
      "targetHandle": "toolAgentflow_0",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#d4a373",
        "edgeLabel": "1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_5-conditionAgentflow_5-output-1-toolAgentflow_0-toolAgentflow_0"
    },
    {
      "source": "toolAgentflow_0",
      "sourceHandle": "toolAgentflow_0-output-toolAgentflow",
      "target": "customFunctionAgentflow_14",
      "targetHandle": "customFunctionAgentflow_14",
      "data": {
        "sourceColor": "#d4a373",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "toolAgentflow_0-toolAgentflow_0-output-toolAgentflow-customFunctionAgentflow_14-customFunctionAgentflow_14"
    },
    {
      "source": "customFunctionAgentflow_14",
      "sourceHandle": "customFunctionAgentflow_14-output-customFunctionAgentflow",
      "target": "llmAgentflow_3",
      "targetHandle": "llmAgentflow_3",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#64B5F6",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_14-customFunctionAgentflow_14-output-customFunctionAgentflow-llmAgentflow_3-llmAgentflow_3"
    },
    {
      "source": "customFunctionAgentflow_15",
      "sourceHandle": "customFunctionAgentflow_15-output-customFunctionAgentflow",
      "target": "customFunctionAgentflow_20",
      "targetHandle": "customFunctionAgentflow_20",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_15-customFunctionAgentflow_15-output-customFunctionAgentflow-customFunctionAgentflow_20-customFunctionAgentflow_20"
    },
    {
      "source": "customFunctionAgentflow_16",
      "sourceHandle": "customFunctionAgentflow_16-output-customFunctionAgentflow",
      "target": "customFunctionAgentflow_30",
      "targetHandle": "customFunctionAgentflow_30",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_16-customFunctionAgentflow_16-output-customFunctionAgentflow-customFunctionAgentflow_30-customFunctionAgentflow_30"
    },
    {
      "source": "customFunctionAgentflow_20",
      "sourceHandle": "customFunctionAgentflow_20-output-customFunctionAgentflow",
      "target": "conditionAgentflow_3",
      "targetHandle": "conditionAgentflow_3",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFB938",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_20-customFunctionAgentflow_20-output-customFunctionAgentflow-conditionAgentflow_3-conditionAgentflow_3"
    },
    {
      "source": "customFunctionAgentflow_17",
      "sourceHandle": "customFunctionAgentflow_17-output-customFunctionAgentflow",
      "target": "llmAgentflow_7",
      "targetHandle": "llmAgentflow_7",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#64B5F6",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_17-customFunctionAgentflow_17-output-customFunctionAgentflow-llmAgentflow_7-llmAgentflow_7"
    },
    {
      "source": "conditionAgentflow_13",
      "sourceHandle": "conditionAgentflow_13-output-1",
      "target": "toolAgentflow_1",
      "targetHandle": "toolAgentflow_1",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#d4a373",
        "edgeLabel": "1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_13-conditionAgentflow_13-output-1-toolAgentflow_1-toolAgentflow_1"
    },
    {
      "source": "toolAgentflow_1",
      "sourceHandle": "toolAgentflow_1-output-toolAgentflow",
      "target": "customFunctionAgentflow_17",
      "targetHandle": "customFunctionAgentflow_17",
      "data": {
        "sourceColor": "#d4a373",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "toolAgentflow_1-toolAgentflow_1-output-toolAgentflow-customFunctionAgentflow_17-customFunctionAgentflow_17"
    },
    {
      "source": "customFunctionAgentflow_21",
      "sourceHandle": "customFunctionAgentflow_21-output-customFunctionAgentflow",
      "target": "customFunctionAgentflow_18",
      "targetHandle": "customFunctionAgentflow_18",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_21-customFunctionAgentflow_21-output-customFunctionAgentflow-customFunctionAgentflow_18-customFunctionAgentflow_18"
    },
    {
      "source": "customFunctionAgentflow_18",
      "sourceHandle": "customFunctionAgentflow_18-output-customFunctionAgentflow",
      "target": "conditionAgentflow_12",
      "targetHandle": "conditionAgentflow_12",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFB938",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_18-customFunctionAgentflow_18-output-customFunctionAgentflow-conditionAgentflow_12-conditionAgentflow_12"
    },
    {
      "source": "conditionAgentflow_3",
      "sourceHandle": "conditionAgentflow_3-output-1",
      "target": "customFunctionAgentflow_21",
      "targetHandle": "customFunctionAgentflow_21",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#E4B7FF",
        "edgeLabel": "1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_3-conditionAgentflow_3-output-1-customFunctionAgentflow_21-customFunctionAgentflow_21"
    },
    {
      "source": "conditionAgentflow_3",
      "sourceHandle": "conditionAgentflow_3-output-0",
      "target": "directReplyAgentflow_4",
      "targetHandle": "directReplyAgentflow_4",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DDBBB",
        "edgeLabel": "0",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_3-conditionAgentflow_3-output-0-directReplyAgentflow_4-directReplyAgentflow_4"
    },
    {
      "source": "customFunctionAgentflow_30",
      "sourceHandle": "customFunctionAgentflow_30-output-customFunctionAgentflow",
      "target": "conditionAgentflow_4",
      "targetHandle": "conditionAgentflow_4",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFB938",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_30-customFunctionAgentflow_30-output-customFunctionAgentflow-conditionAgentflow_4-conditionAgentflow_4"
    },
    {
      "source": "conditionAgentflow_4",
      "sourceHandle": "conditionAgentflow_4-output-1",
      "target": "customFunctionAgentflow_31",
      "targetHandle": "customFunctionAgentflow_31",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#E4B7FF",
        "edgeLabel": "1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_4-conditionAgentflow_4-output-1-customFunctionAgentflow_31-customFunctionAgentflow_31"
    },
    {
      "source": "conditionAgentflow_4",
      "sourceHandle": "conditionAgentflow_4-output-0",
      "target": "directReplyAgentflow_7",
      "targetHandle": "directReplyAgentflow_7",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DDBBB",
        "edgeLabel": "0",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_4-conditionAgentflow_4-output-0-directReplyAgentflow_7-directReplyAgentflow_7"
    },
    {
      "source": "customFunctionAgentflow_31",
      "sourceHandle": "customFunctionAgentflow_31-output-customFunctionAgentflow",
      "target": "customFunctionAgentflow_19",
      "targetHandle": "customFunctionAgentflow_19",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_31-customFunctionAgentflow_31-output-customFunctionAgentflow-customFunctionAgentflow_19-customFunctionAgentflow_19"
    },
    {
      "source": "customFunctionAgentflow_19",
      "sourceHandle": "customFunctionAgentflow_19-output-customFunctionAgentflow",
      "target": "conditionAgentflow_18",
      "targetHandle": "conditionAgentflow_18",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFB938",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_19-customFunctionAgentflow_19-output-customFunctionAgentflow-conditionAgentflow_18-conditionAgentflow_18"
    },
    {
      "source": "conditionAgentflow_19",
      "sourceHandle": "conditionAgentflow_19-output-1",
      "target": "toolAgentflow_2",
      "targetHandle": "toolAgentflow_2",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#d4a373",
        "edgeLabel": "1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_19-conditionAgentflow_19-output-1-toolAgentflow_2-toolAgentflow_2"
    },
    {
      "source": "toolAgentflow_2",
      "sourceHandle": "toolAgentflow_2-output-toolAgentflow",
      "target": "customFunctionAgentflow_23",
      "targetHandle": "customFunctionAgentflow_23",
      "data": {
        "sourceColor": "#d4a373",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "toolAgentflow_2-toolAgentflow_2-output-toolAgentflow-customFunctionAgentflow_23-customFunctionAgentflow_23"
    },
    {
      "source": "customFunctionAgentflow_23",
      "sourceHandle": "customFunctionAgentflow_23-output-customFunctionAgentflow",
      "target": "llmAgentflow_12",
      "targetHandle": "llmAgentflow_12",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#64B5F6",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_23-customFunctionAgentflow_23-output-customFunctionAgentflow-llmAgentflow_12-llmAgentflow_12"
    },
    {
      "source": "executeFlowAgentflow_1",
      "sourceHandle": "executeFlowAgentflow_1-output-executeFlowAgentflow",
      "target": "conditionAgentflow_6",
      "targetHandle": "conditionAgentflow_6",
      "data": {
        "sourceColor": "#a3b18a",
        "targetColor": "#FFB938",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "executeFlowAgentflow_1-executeFlowAgentflow_1-output-executeFlowAgentflow-conditionAgentflow_6-conditionAgentflow_6"
    },
    {
      "source": "conditionAgentflow_6",
      "sourceHandle": "conditionAgentflow_6-output-0",
      "target": "directReplyAgentflow_8",
      "targetHandle": "directReplyAgentflow_8",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#4DDBBB",
        "edgeLabel": "0",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_6-conditionAgentflow_6-output-0-directReplyAgentflow_8-directReplyAgentflow_8"
    },
    {
      "source": "conditionAgentflow_7",
      "sourceHandle": "conditionAgentflow_7-output-0",
      "target": "customFunctionAgentflow_0",
      "targetHandle": "customFunctionAgentflow_0",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#E4B7FF",
        "edgeLabel": "0",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_7-conditionAgentflow_7-output-0-customFunctionAgentflow_0-customFunctionAgentflow_0"
    },
    {
      "source": "conditionAgentflow_7",
      "sourceHandle": "conditionAgentflow_7-output-1",
      "target": "customFunctionAgentflow_15",
      "targetHandle": "customFunctionAgentflow_15",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#E4B7FF",
        "edgeLabel": "1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_7-conditionAgentflow_7-output-1-customFunctionAgentflow_15-customFunctionAgentflow_15"
    },
    {
      "source": "conditionAgentflow_7",
      "sourceHandle": "conditionAgentflow_7-output-2",
      "target": "customFunctionAgentflow_16",
      "targetHandle": "customFunctionAgentflow_16",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#E4B7FF",
        "edgeLabel": "2",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_7-conditionAgentflow_7-output-2-customFunctionAgentflow_16-customFunctionAgentflow_16"
    },
    {
      "source": "conditionAgentAgentflow_1",
      "sourceHandle": "conditionAgentAgentflow_1-output-1",
      "target": "executeFlowAgentflow_0",
      "targetHandle": "executeFlowAgentflow_0",
      "data": {
        "sourceColor": "#ff8fab",
        "targetColor": "#a3b18a",
        "edgeLabel": "1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentAgentflow_1-conditionAgentAgentflow_1-output-1-executeFlowAgentflow_0-executeFlowAgentflow_0"
    },
    {
      "source": "executeFlowAgentflow_0",
      "sourceHandle": "executeFlowAgentflow_0-output-executeFlowAgentflow",
      "target": "customFunctionAgentflow_11",
      "targetHandle": "customFunctionAgentflow_11",
      "data": {
        "sourceColor": "#a3b18a",
        "targetColor": "#E4B7FF",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "executeFlowAgentflow_0-executeFlowAgentflow_0-output-executeFlowAgentflow-customFunctionAgentflow_11-customFunctionAgentflow_11"
    },
    {
      "source": "customFunctionAgentflow_12",
      "sourceHandle": "customFunctionAgentflow_12-output-customFunctionAgentflow",
      "target": "conditionAgentflow_2",
      "targetHandle": "conditionAgentflow_2",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFB938",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_12-customFunctionAgentflow_12-output-customFunctionAgentflow-conditionAgentflow_2-conditionAgentflow_2"
    },
    {
      "source": "conditionAgentflow_2",
      "sourceHandle": "conditionAgentflow_2-output-1",
      "target": "executeFlowAgentflow_1",
      "targetHandle": "executeFlowAgentflow_1",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#a3b18a",
        "edgeLabel": "1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_2-conditionAgentflow_2-output-1-executeFlowAgentflow_1-executeFlowAgentflow_1"
    },
    {
      "source": "conditionAgentflow_6",
      "sourceHandle": "conditionAgentflow_6-output-1",
      "target": "customFunctionAgentflow_24",
      "targetHandle": "customFunctionAgentflow_24",
      "data": {
        "sourceColor": "#FFB938",
        "targetColor": "#E4B7FF",
        "edgeLabel": "1",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "conditionAgentflow_6-conditionAgentflow_6-output-1-customFunctionAgentflow_24-customFunctionAgentflow_24"
    },
    {
      "source": "customFunctionAgentflow_24",
      "sourceHandle": "customFunctionAgentflow_24-output-customFunctionAgentflow",
      "target": "conditionAgentflow_7",
      "targetHandle": "conditionAgentflow_7",
      "data": {
        "sourceColor": "#E4B7FF",
        "targetColor": "#FFB938",
        "isHumanInput": false
      },
      "type": "agentFlow",
      "id": "customFunctionAgentflow_24-customFunctionAgentflow_24-output-customFunctionAgentflow-conditionAgentflow_7-conditionAgentflow_7"
    }
  ]
}